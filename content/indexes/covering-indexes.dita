<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yv4_c2z_wt">
 <title>Covering Indexes</title>
 <shortdesc>When an index includes the actual values of all the fields specified in the query, the
  index covers the query and does not require an additional step to fetch the actual values from the
  data service. An index, in this case, is called a covering index and the query is called a covered
  query.  As a result, covered queries are faster and deliver better performance.</shortdesc>
 <conbody>
        <p>The following diagram illustrates the query execution work flow without covering
            indexes:</p>
        <p>
            <image placement="break" href="images/n1ql-query-workflow.png" width="5.5in"
                id="image_up2_ngx_xt"/>
        </p>
        <p>The following diagram illustrates the query execution work flow with covering indexes:
                <image placement="break" href="images/n1ql-query-workflow-cover-idx.png"
                width="5.5in" id="image_c25_zlp_yt"/></p>
        <p>As you can see in the second diagram, a well designed query that uses a covering index
            avoids the additional steps to fetch the data from the data service. This results in a
            considerable performance improvement. </p>
        <p>You can see the query execution plan using the EXPLAIN statement. When a query uses a
      covering index, the EXPLAIN statement shows that a covering index is used for data access,
      thus avoiding the overhead associated with key-value document fetches. Consider a simple
      index, <userinput>idxstate</userinput>, on the attribute <parmname>state</parmname> in the
        <codeph>beer-sample</codeph> bucket:
      <codeblock>CREATE INDEX idx_country on `travel-sample` (country) USING GSI;</codeblock> If we
      select <parmname>country</parmname> from the <codeph>`travel-sample`</codeph> bucket, the
      actual values of the field <parmname>country</parmname> that are to be returned are present in
      the index <parmname>idx_country</parmname>, and avoids an additional step to fetch the data.
      In this case, the index <parmname>idx_country</parmname> is called a covering index and the
      query is a covered query.
      <codeblock>EXPLAIN SELECT count(country) FROM `travel-sample` WHERE type="hotel" AND country = "France";

Results:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IntersectScan",
        "scans": [
          {
            "#operator": "IndexScan2",
            "index": "def_type",
            "index_id": "444ebc70b971b603",
            "index_projection": {
              "primary_key": true
            },
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"hotel\"",
                    "inclusion": 3,
                    "low": "\"hotel\""
                  }
                ]
              }
            ],
            "using": "gsi"
          },
          {
            "#operator": "IndexScan2",
            "index": "idx_countrycity",
            "index_id": "3822e9e09dfef4e3",
            "index_projection": {
              "primary_key": true
            },
            "keyspace": "travel-sample",
            "namespace": "default",
            "spans": [
              {
                "exact": true,
                "range": [
                  {
                    "high": "\"France\"",
                    "inclusion": 3,
                    "low": "\"France\""
                  }
                ]
              }
            ],
            "using": "gsi"
          }
        ]
      },
      {
        "#operator": "Fetch",
        "keyspace": "travel-sample",
        "namespace": "default"
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "Filter",
              "condition": "(((`travel-sample`.`type`) = \"hotel\") and ((`travel-sample`.`country`) = \"France\"))"
            },
            {
              "#operator": "InitialGroup",
              "aggregates": [
                "count((`travel-sample`.`country`))"
              ],
              "group_keys": []
            }
          ]
        }
      },
      {
        "#operator": "IntermediateGroup",
        "aggregates": [
          "count((`travel-sample`.`country`))"
        ],
        "group_keys": []
      },
      {
        "#operator": "FinalGroup",
        "aggregates": [
          "count((`travel-sample`.`country`))"
        ],
        "group_keys": []
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "InitialProject",
              "result_terms": [
                {
                  "expr": "count((`travel-sample`.`country`))"
                }
              ]
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      }
    ]
  },
  "text": "SELECT count(country) FROM `travel-sample` WHERE type=\"hotel\" AND country = \"France\";"
}</codeblock></p>
        <p>If you modify the query to select the <parmname>country</parmname> and
        <parmname>city</parmname> from the <codeph>`travel-sample`</codeph> bucket using the same
      index, <parmname>idx_country</parmname>, the index does not contain the values of all the
      fields to satisfy the query and hence a key-value fetch is performed to retrieve this data.
      <codeblock>EXPLAIN SELECT country,city FROM `travel-sample` WHERE type="hotel" AND country = "France";

Results:
[
  {
    "plan": {
      "#operator": "Sequence",
      "~children": [
        {
          "#operator": "IntersectScan",
          "scans": [
            {
              "#operator": "IndexScan2",
              "index": "def_type",
              "index_id": "444ebc70b971b603",
              "index_projection": {
                "primary_key": true
              },
              "keyspace": "travel-sample",
              "namespace": "default",
              "spans": [
                {
                  "exact": true,
                  "range": [
                    {
                      "high": "\"hotel\"",
                      "inclusion": 3,
                      "low": "\"hotel\""
                    }
                  ]
                }
              ],
              "using": "gsi"
            },
            {
              "#operator": "IndexScan2",
              "index": "idx_country",
              "index_id": "5ef2d5fe806932f0",
              "index_projection": {
                "primary_key": true
              },
              "keyspace": "travel-sample",
              "namespace": "default",
              "spans": [
                {
                  "exact": true,
                  "range": [
                    {
                      "high": "\"France\"",
                      "inclusion": 3,
                      "low": "\"France\""
                    }
                  ]
                }
              ],
              "using": "gsi"
            }
          ]
        },
        {
          "#operator": "Fetch",
          "keyspace": "travel-sample",
          "namespace": "default"
        },
        {
          "#operator": "Parallel",
          "~child": {
            "#operator": "Sequence",
            "~children": [
              {
                "#operator": "Filter",
                "condition": "(((`travel-sample`.`type`) = \"hotel\") and ((`travel-sample`.`country`) = \"France\"))"
              },
              {
                "#operator": "InitialProject",
                "result_terms": [
                  {
                    "expr": "(`travel-sample`.`country`)"
                  },
                  {
                    "expr": "(`travel-sample`.`city`)"
                  }
                ]
              },
              {
                "#operator": "FinalProject"
              }
            ]
          }
        }
      ]
    },
    "text": "SELECT country,city FROM `travel-sample` WHERE type=\"hotel\" AND country = \"France\";"
  }
]</codeblock>To
      use a covering index for the modified query, you must define an index with the
        <parmname>country</parmname> and <parmname>city</parmname> attributes before executing the
      query.
      <codeblock>CREATE INDEX idx_country_city on `travel-sample` (country, city) USING GSI;</codeblock></p>
        <p>
            <note type="attention"><codeph>MISSING</codeph> items are not indexed by indexers. To
        take advantage of covering indexes and for the index to qualify, a query needs to exclude
        documents where the index key expression evaluates to <codeph>MISSING</codeph>. For example,
        index index1 defined below covers the following query.
        <codeblock>CREATE INDEX index1 ON bucket(attribute1) WHERE attribute2 = "value"; </codeblock><codeblock>SELECT attribute1 FROM bucket WHERE attribute2="value AND attribute1 IS NOT MISSING;</codeblock></note>
        </p>
        <p>Covering indexes are applicable to secondary index scans and can be used with view and
            global secondary indexes (GSI). Queries with expressions and aggregates benefit from
            covering indexes. <note>You cannot use multiple GSI indexes to cover a query. You must
                create a composite index with all the required fields for the query engine to cover
                by GSI and not require reading the documents from the data nodes.</note></p>
        <p>The following queries can benefit from covering indexes. Try these statements using
                <apiname>cbq</apiname> to see the query execution plan. </p>
        <p><b>Expressions and Aggregates</b>
      <codeblock>EXPLAIN SELECT max(country) FROM `travel-sample` WHERE city = "Paris";</codeblock><codeblock>EXPLAIN SELECT country || city FROM `travel-sample` USE INDEX (idx_country_city) WHERE city = "Paris"; </codeblock></p>
        <p><b>UNION/INTERSECT/EXCEPT</b>
      <codeblock>SELECT country FROM `travel-sample` WHERE city = "Paris"
    UNION ALL
    SELECT country FROM `travel-sample` WHERE city = "San Francisco";</codeblock></p>
        <p><b>Sub-queries</b><codeblock>SELECT *
   FROM (
   SELECT country FROM `travel-sample` WHERE city = "Paris"
   UNION ALL
   SELECT country FROM `travel-sample` WHERE city = "San Francisco"
   ) AS newtab;
  </codeblock></p>
        <p><b>SELECT in INSERT
      statements</b><codeblock>INSERT INTO `travel-sample`(KEY k, VALUE city) 
   SELECT country, city FROM `travel-sample` WHERE city = "Paris";</codeblock></p>
        <p><b>Arrays in WHERE clauses</b></p>
        <p>First, create a new index, <userinput>idxarray</userinput>.
      <codeblock><?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>CREATE INDEX idx_array ON `travel-sample`(a, b);<?oxy_custom_end?></codeblock>
      Then, run the following query:
      <?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?><codeblock>SELECT b FROM `beer-sample` WHERE a = [1, 2, 3, 4];<?oxy_custom_end?></codeblock></p>
        <p><?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?><b>Collection
        Operators: FIRST, ARRAY, ANY, EVERY, and ANY AND EVERY</b><?oxy_custom_end?></p>
        <p>Since the <codeph>default</codeph> bucket is empty by default, let's first insert the
            following documents into the default bucket:
            <codeblock>INSERT INTO default VALUES ("account-customerXYZ-123456789",
{ "accountNumber": 123456789, 
  "docId": "account-customerXYZ-123456789", 
  "code": "001", 
  "transDate":"2016-07-02" } );

INSERT INTO default VALUES ("codes-version-9", 
{ "version": 9, 
  "docId": "codes-version-9", 
  "codes": [
    { "code": "001", 
      "type": "P", 
      "title": "SYSTEM W MCC", 
      "weight": 26.2466 
    },
    { "code": "166", 
      "type": "P", 
      "title": "SYSTEM W/O MCC", 
      "weight": 14.6448 }
  ] 
});</codeblock></p>
        <p>Create an index, <codeph>idx_account_customer_xyz_transDate</codeph>:
            <codeblock>CREATE INDEX idx_account_customer_xyz_transDate 
    ON default(SUBSTR(transDate,0,10),code) 
    WHERE code != "" AND meta().id LIKE "account-customerXYZ%";</codeblock></p>
     <p>Then, run the following query:
            <codeblock>SELECT SUBSTR(account.transDate,0,10) AS transDate, AVG(codes.weight) AS avgWeight
FROM default account
JOIN default codesDoc ON KEYS "codes-version-9"
LET codes = FIRST c FOR c IN codesDoc.codes WHEN c.code = account.code END
WHERE account.code != "" AND meta(account).id LIKE "account-customerXYZ-%"
AND SUBSTR(account.transDate,0,10) >= "2016-07-01" AND SUBSTR(account.transDate,0,10) &lt; "2016-07-03"
GROUP BY SUBSTR(account.transDate,0,10);

Results:
[
  {
    "avgWeight": 26.2466,
    "transDate": "2016-07-02"
  }
]</codeblock></p>
        <p>The EXPLAIN statement for the above query shows that the index covers the query. </p>
     
        <p><b><xref href="../n1ql/n1ql-language-reference/prepare.dita">Prepared
                statements</xref></b> also benefit from using covering indexes. </p>
    </conbody>
</concept>
