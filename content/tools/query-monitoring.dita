<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="topic_yg4_5n1_q1b">
  <title>Query Monitoring</title>
  <shortdesc>Couchbase Server 5.0 introduces new UI that allows you to monitor the current state of
    query service. </shortdesc>
  <body>
    <note>Query Monitoring is an Enterprise Edition only feature.</note>
    <p dir="ltr">From the <uicontrol>Couchbase Web Console</uicontrol> >
        <uicontrol>Query</uicontrol> > <uicontrol>Query Monitor</uicontrol>, you can view the
      different types queries that are Active (currently running), Completed (recently run), and
      Prepared (aggregate statistics for prepared queries). Statistics information for the query
      service is displayed at the bottom of the page. Different information may be shown depending
      on the userâ€™s access control role.</p>
    <p>
      <image placement="break" href="images/query-monitor.png" width="820" id="image_zg4_5n1_q1b"/>
    </p>
    <p dir="ltr">The information about these queries is automatically updated every 5 seconds. To
      freeze the display updates, click <uicontrol>pause</uicontrol> located above the query table,
      next to the table heading. When paused, a <uicontrol>resume</uicontrol> button becomes
      available to let you restart automatic updates. You can sort the query information table by
      clicking on any of the column headers. </p>
    <section id="section_ah4_5n1_q1b">
      <title>Active Queries</title>
      <p>By default, the <uicontrol>Active Queries</uicontrol> page is displayed on the Query
        Monitoring screen. The currently running queries are displayed, showing the details such as
        the query syntax, the query node address where the query is running, duration, request
        identification number, and the current state of the query. Click the
          <uicontrol>edit</uicontrol> link to edit that particular query in the <uicontrol>Query
          Editor</uicontrol>. To cancel a long running query, click the
          <uicontrol>cancel</uicontrol> link located on the right side of the row. </p>
      <p>
        <image placement="break" href="images/query-monitor-active.png" width="820"
          id="image_bh4_5n1_q1b"/>
      </p>
    </section>
    <section id="section_ch4_5n1_q1b">
      <title>Completed Queries</title>
      <p>From the <uicontrol>Couchbase Web Console > Query > Query Monitor ></uicontrol> click the
          <uicontrol>Completed</uicontrol> button to view the table of completed queries whose
        runtime exceeded a system-specified threshold (default 1 second). Each row shows the query
        syntax, the query node address where the query was run, duration, the result count, the
        final state of the query (for example, completed, cancelled), and the timestamp when the
        query was run. </p>
      <p>
        <image placement="break" href="images/query-monitor-completed.png" width="820"
          id="image_dh4_5n1_q1b"/>
      </p>
    </section>
    <section id="section_eh4_5n1_q1b">
      <title>Prepared Queries</title>
      <p>From the <uicontrol>Couchbase Web Console > Query > Query Monitor ></uicontrol> click the
          <uicontrol>Prepared</uicontrol> button to view the prepared queries. This page displays
        the aggregate statistics for prepared queries showing details such as query syntax, average
        elapsed time, number of uses, and the query node address. </p>
    </section>
    <p>
      <image placement="break" href="images/query-monitor-prepared.png" width="820"
        id="image_fh4_5n1_q1b"/>
    </p>
    <p>For more information about system keyspaces and API for monitoring the operation of
      individual queries and query service nodes, see <xref
        href="../monitoring/monitoring-n1ql-query.dita#topic_nvs_ghr_dz"/>.</p>
    <section id="section_gh4_5n1_q1b"><title>N1QL Cluster
        Monitoring</title><p><b>Theme</b></p><p>The second wave of monitoring features will focus
          on:<ul id="ul_hh4_5n1_q1b">
          <li>Cluster aware operation</li>
          <li>Further diagnostics</li>
          <li>More system keyspaces</li>
        </ul><b>Requirements</b><ul id="ul_ih4_5n1_q1b">
          <li>Ability to access active / completed / prepared requests across all N1QL nodes from
              N1QL<ul id="ul_jh4_5n1_q1b">
              <li>Aside from a language completeness point of view, this is required by the upcoming
                Query Monitoring admin console feature</li>
            </ul></li>
          <li>Ability to list nodes by type and with status from N1QL (MB-15438)</li>
          <li>Ability to list system keyspaces from system:keyspaces (MB-18293)</li>
          <li>Extra fields in<codeph> system:active_requests </codeph>/<codeph> completed_requests
            </codeph>(eg MB-15902, MB-17399)</li>
          <li>Extra counters to keep track of specific requests (e.g. cancelled, MB-20157)</li>
          <li>Extend killing request to CREATE INDEX (MB-19882)</li>
        </ul></p><b>Language Impact</b><p>
        <ul id="ul_jqp_qgw_q1b">
          <li>None - only new system keyspaces created.</li>
        </ul>
      </p><p><b>Implementation</b></p><p>Cluster Monitoring<ul id="ul_kh4_5n1_q1b">
          <li>For single N1QL node systems or standalone services (such as nodes running outside of
            a cluster), system keyspaces <codeph>active_requests</codeph>,
              <codeph>completed_requests</codeph> and <codeph>prepareds</codeph> will see no change
            in behavior.</li>
          <li>System keyspaces <codeph>active_requests</codeph>, <codeph>completed_requests</codeph>
            and <codeph>prepareds</codeph> will include a node name in the output document.</li>
          <li>New admin <codeph>completed_requests</codeph> endpoint to return a single completed
            request is required (already exists for <codeph>active_requests</codeph>and
              <codeph>prepareds</codeph>) and will be used for fetch operations.</li>
          <li>New admin endpoints to list <codeph>RequestId</codeph> for
              <codeph>active_requests</codeph> and <codeph>completed_requests</codeph> as well as
            names for <codeph>prepareds</codeph> are required since they will be used for per node
            scan operations.</li>
          <li>System keyspaces will sport a secondary index on the node name.<ul id="ul_ezn_5hw_q1b">
              <li>The node name, if present in the WHERE clause, will be pushed down.</li>
              <li>Where the node name matches the local node, the local operation will be used.</li>
              <li>Only nodes specified in the WHERE clause, if any, will be accessed.</li>
              <li>Otherwise all nodes will be scanned.</li>
              <li>Once a primary or secondary scan has produced a list of candidate entries, fetches
                will be done either locally or using the single entry endpoint as provided
                above.</li>
            </ul></li>
          <li>In order to access remote nodes, we need:<ul id="ul_aqx_23w_q1b">
              <li>A node map from <codeph>ns_server</codeph> (this is already available,
                clearly)</li>
              <li>The ability to access N1QL endpoints directly from the datastore / system
                layer.</li>
            </ul></li>
          <li>Fetch and delete will require a node name as part of the key.</li>
        </ul>Alternative Designs for Cluster Monitoring</p><p>The advantage of the scheme above is
        that is simple and consistent with the existing infrastructure, and avoids pitfalls like
        clients switching to different nodes in the cluster for each subsequent request (and
        therefore unexpectedly not finding entries), however, it lends itself to inconsistent
        performance: where the monitoring information accessed is local, latency will be low, where
        remote access is required, latency will be higher.</p><p/></section>
  </body>
</topic>
