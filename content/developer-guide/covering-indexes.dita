<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_yv4_c2z_wt">
 <title>Covering indexes</title>
 <shortdesc>Indexes help locate data in a database and do not retrieve the data itself. Covering
  indexes are special cases where the index includes all the information needed to satisfy a query
  and does not require an additional step to access the Data Service. As a result, covered queries,
  are faster and deliver better performance.</shortdesc>
 <conbody>
  <p>The following diagram illustrates the query execution work flow without covering indexes:</p>
  <p>
   <image placement="break" href="images/n1ql-query-workflow.png" width="5.5in" id="image_up2_ngx_xt"
   />
  </p>
  <p>The following diagram illustrates the query execution work flow with covering indexes: <image
    placement="break" href="images/n1ql-query-workflow-cover-idx.png" width="5.5in"
    id="image_c25_zlp_yt"/></p>
  <p>As you can see in the second diagram, a well designed query that uses a covering index avoids the additional steps to fetch the data from the data service. This results in a considerable performance improvement. </p>
  <p>You can see the query execution plan using the EXPLAIN statement. When a query uses a covering
      index, the <b>EXPLAIN</b> statement shows that a covering index is used for data access, thus
      avoiding the overhead associated with key-value document fetches. Consider a simple index,
        <userinput>idx_city</userinput>, on the attribute <parmname>city</parmname> in the
        <codeph>travel-sample</codeph> bucket:
      <codeblock>CREATE INDEX idx_city on `travel-sample` (city) USING GSI;</codeblock> If we select
        <parmname>city</parmname> from the `travel-sample` bucket, all the data that is to be
      returned is present in the index <parmname>idx_city</parmname> and thus avoids the additional
      step to fetch the data. In this case, the index <parmname>idx_city</parmname> is called a
      covering index and the query is a covered query.
      <codeblock>EXPLAIN SELECT city FROM `travel-sample` WHERE city = "Paris";

Results:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
        "#operator": "IndexScan2",
        "covers": [
          "cover ((`travel-sample`.`city`))",
          "cover ((meta(`travel-sample`).`id`))"
        ],
        "index": "def_city",
        "index_id": "cc931d457b4b7718",
        "index_projection": {
          "entry_keys": [
            0
          ]
        },
        "keyspace": "travel-sample",
        "namespace": "default",
        "spans": [
          {
            "exact": true,
            "range": [
              {
                "high": "\"Paris\"",
                "inclusion": 3,
                "low": "\"Paris\""
              }
            ]
          }
        ],
        "using": "gsi"
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "Filter",
              "condition": "(cover ((`travel-sample`.`city`)) = \"Paris\")"
            },
            {
              "#operator": "InitialProject",
              "result_terms": [
                {
                  "expr": "cover ((`travel-sample`.`city`))"
                }
              ]
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      }
    ]
  },
  "text": "SELECT city FROM `travel-sample` WHERE city = \"Paris\";"
}</codeblock></p>
  <p>If you modify the query to select the <parmname>country</parmname> and
        <parmname>city</parmname> from the <codeph>`travel-sample`</codeph> bucket using the same
      index, <parmname>idx_city</parmname>, the index does not contain all the information to
      satisfy the query and hence a key-value fetch is performed to retrieve the data.
        <codeblock>EXPLAIN SELECT country,city from `travel-sample` WHERE country = "France";

Results:
{
  "plan": {
    "#operator": "Sequence",
    "~children": [
      {
 <b>       "#operator": "PrimaryScan",
        "index": "def_primary",
        "keyspace": "travel-sample",
        "namespace": "default",</b>
        "using": "gsi"
      },
      {<b>
        "#operator": "Fetch",
        "keyspace": "travel-sample",
        "namespace": "default"</b>
      },
      {
        "#operator": "Parallel",
        "~child": {
          "#operator": "Sequence",
          "~children": [
            {
              "#operator": "Filter",
              "condition": "((`travel-sample`.`country`) = \"France\")"
            },
            {
              "#operator": "InitialProject",
              "result_terms": [
                {
                  "expr": "(`travel-sample`.`country`)"
                },
                {
                  "expr": "(`travel-sample`.`city`)"
                }
              ]
            },
            {
              "#operator": "FinalProject"
            }
          ]
        }
      }
    ]
  },
  "text": "SELECT country,city from `travel-sample` WHERE country = \"France\";"
}</codeblock><note>To
        use a covering index for the modified query, you must define an index with the
          <parmname>country</parmname> and <parmname>city</parmname> attributes before executing the
        query.
        <codeblock>CREATE INDEX idx_countrycity on `travel-sample` (country, city) USING GSI;</codeblock></note></p>
  <p>Covering indexes are only applicable to secondary index scans and can be used with views and global secondary indexes (GSI). Queries with expressions and aggregates benefit from covering indexes. </p>
<p>The following queries can benefit from covering indexes. Try these statements using <apiname>cbq</apiname> to see the query execution plan. </p>
  <p><b>Expressions and Aggregates</b>
      <codeblock>EXPLAIN SELECT max(country) FROM `travel-sample` WHERE city = "Paris";</codeblock><codeblock>EXPLAIN SELECT country || city FROM `travel-sample` USE INDEX (idx_countrycity) WHERE country = "France"; </codeblock></p>
  <p><b>UNION/INTERSECT/EXCEPT</b>
      <codeblock>SELECT country FROM `travel-sample` WHERE city = 'Paris'
    UNION ALL
    SELECT country FROM `travel-sample` WHERE city = 'San Francisco';</codeblock></p>
  <p><b>Derived tables or
      sub-queries</b><codeblock>SELECT *
   FROM (
   SELECT country FROM `travel-sample` WHERE city = 'Paris'
   UNION ALL
   SELECT country FROM `travel-sample` WHERE city = 'San Francisco'
   ) AS newtab;
  </codeblock></p>
  <p><b>SELECT in INSERT
      statements</b><codeblock>INSERT INTO `travel-sample`(KEY country, VALUE city) 
   SELECT country, city FROM `travel-sample` WHERE city = 'San Francisco';</codeblock></p>
  <p><b>Arrays in WHERE clauses</b>
  </p>
  <p>First, create a new index, <userinput>idx_array</userinput>. <codeblock>CREATE INDEX idx_array on `travel-sample`(a, b);</codeblock>
      <?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>Then, run the following
      query:
      <codeblock>SELECT b from `travel-sample` WHERE a = [1, 2, 3, 4];<?oxy_custom_end?></codeblock></p>
  <p><b>Prepared statements</b> also benefit from using covering indexes.</p>
 </conbody>
</concept>
