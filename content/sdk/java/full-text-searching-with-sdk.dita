<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="java-fts">
    <title>Full Text Search (FTS) Using the Java SDK with Couchbase Server</title>
    <titlealts><navtitle>Searching from the SDK</navtitle></titlealts>
    <shortdesc>You can use the Full Text Search service (FTS) to create queryable full-text indexes in Couchbase Server.</shortdesc>
    <body>
        <p>Couchbase offers Full-text search support, allowing you to search for documents that
            contain certain words or phrases. In the Java SDK you can search full-text indexes by
            using the <apiname>Bucket.query(SearchQuery)</apiname> API.</p>
        <!-- <note conref="../shared/experimental-pars.dita#experimental/fts"/> -->
        <p>Querying a FTS index through the Java client is performed through the <apiname>Bucket.query(SearchQuery q)</apiname>
            method, providing a <apiname>SearchQuery</apiname>. Building a <apiname>SearchQuery</apiname> takes two
            parameters, the index name to query and the actual search query itself (kind of a statement). Additional
            search options may be specified by using the <apiname>SearchQuer</apiname> as a builder, chaining setters
            for each relevant option.</p>
        <p>This method returns a <apiname>SearchQueryResult</apiname> whose iterator yields the results of the query (in the
            form of <apiname>SearchQueryRow</apiname> objects). It also exposes a <codeph>status()</codeph> for the request,
            some execution <codeph>metrics()</codeph> and <codeph>facets()</codeph> results if some facets have been requested.
            Instead of iterating directly on the result, you can access rows as a list through the <codeph>hits()</codeph> method,
            and in case of execution errors you can inspect the error messages in the <codeph>errors()</codeph> method. Note that
            partial results can happen in this case (and hits() will return them). Instead of getting partial results through
            <codeph>hits()</codeph>, one can combine results and errors and get an exception through the use of <codeph>hitsOrFail()</codeph>.
        </p>
        <p>The <apiname>SearchQueryRow</apiname> object contains the <codeph>index</codeph>, <codeph>id</codeph> and
            <codeph>score</codeph> properties, respectively identifying the exact FTS index that returned the hit, the id of the
            document that matched and a decimal score for the match. It also contains optional sections depending on the request
            and the availability of all relevant settings in the FTS mapping. Those are <codeph>explanation()</codeph> (an
            explanation of the plan followed by the FTS index to execute the query), <codeph>locations()</codeph> (a map-like
            listing of the location of all matching terms inside each relevant field that was queried), <codeph>fragments()</codeph>
            (a map-like listing of occurrences of the search terms in each field, with the context of the terms) and
            <codeph>fields()</codeph> (a map of the complete value of each requested field). Most of these need that the index be
            configured to store the data of a searched field.
<codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("travel-sample");
MatchQuery fts = SearchQuery.match("term");
SearchQueryResult result = bkt.query(new SearchQuery("travel-search", fts));
for (SearchQueryRow row : result) {
    System.out.println(row);
}</codeblock>
        </p>

        <section><title>Query Types</title>There are many different flavours of search queries, and each can be constructed
            through static factory methods in the <apiname>SearchQuery</apiname> class. All of these types derive from the
            <apiname>AbstractFtsQuery</apiname> and can be found in the
            <codeph>com.couchbase.client.java.search.queries.AbstractFtsQuery</codeph> package. It contains query classes
            corresponding to those enumerated in <xref href="../full-text-search-overview.dita#full-text-search">the FTS
            generic documentation</xref>. <p>It is important to distinguish between <i>query options</i> and general <i>search
            options</i>. Some options affect the search process in general (such as the <parmname>limit</parmname>, indicating how
            many results to return) while others only affect a specific query (such as <parmname>fuzziness</parmname> for a given
            query). Because multiple queries can be combined in a single search operation, <i>query specific options</i> can be
            specified only in the query object itself, while <i>search options</i> are specified at the level of the
            <apiname>SearchQuery</apiname> class, using builder methods.
<codeblock outputclass="language-java">Bucket bkt = CouchbaseCluster.create("192.168.33.101").openBucket("travel-sample");
MatchQuery fts = SearchQuery.match("term")
    //query options:
    .fuzziness(2).field("content");
SearchQuery query = new SearchQuery("travel-search", fts)
    //search options:
    //will show value for activity and country fields
    .fields("activity", "country")
    //will have max 3 hits
    .limit(3);

SearchQueryResult result = bkt.query(query);
for (SearchQueryRow row : result) {
    System.out.println(row);
}</codeblock></p>

        <p>Here's some sample output for the previous query:</p>
        <screen>DefaultSearchQueryRow{index='travel-search_33760129d0737bff_b7ff6b68', id='landmark_11778', score=0.0313815325019958, explanation={}, \
locations=DefaultHitLocations{size=3, locations=[HitLocation{field='content', term='tea', pos=39, start=254, end=257},HitLocation{field='content', \
term='teas', pos=56, start=353, end=357},HitLocation{field='content', term='tart', pos=17, start=95, end=99}]}, fragments={}, fields={activity=eat, \
country=United States}}

DefaultSearchQueryRow{index='travel-search_33760129d0737bff_b7ff6b68', id='landmark_25547', score=0.02536160834515202, explanation={}, \
locations=DefaultHitLocations{size=3, locations=[HitLocation{field='content', term='tea', pos=33, start=191, end=194},HitLocation{field='content', \
term='try', pos=30, start=177, end=180},HitLocation{field='content', term='per', pos=57, start=337, end=340}]}, fragments={}, fields={activity=eat, \
country=United States}}

DefaultSearchQueryRow{index='travel-search_33760129d0737bff_8b80958a', id='landmark_26854', score=0.02079624734659704, explanation={}, \
locations=DefaultHitLocations{size=10, locations=[HitLocation{field='content', term='trim', pos=227, start=1255, end=1259},HitLocation{field='content', \
term='steam', pos=7, start=41, end=46},HitLocation{field='content', term='steam', pos=38, start=213, end=218},HitLocation{field='content', \
term='steam', pos=74, start=424, end=429},HitLocation{field='content', term='steam', pos=93, start=532, end=537},HitLocation{field='content', \
term='steam', pos=114, start=651, end=656},HitLocation{field='content', term='steam', pos=126, start=715, end=720},HitLocation{field='content', \
term='steam', pos=145, start=819, end=824},HitLocation{field='content', term='steam', pos=300, start=1611, end=1616},HitLocation{field='content', \
term='team', pos=59, start=335, end=339}]}, fragments={}, fields={activity=see, country=United States}}</screen>
        </section>

        <section>
            <title>Query Facets</title>
            <p>Query <xref href="../full-text-search-overview.dita#facets">facets</xref> may also be
            added to the <i>general search parameters</i> by using the <apiname>addFacet(String name, SearchFacet facet)</apiname>
            builder method on <apiname>SearchQuery</apiname>. You can create facet queries by instantiating facets through factory
            methods in the <apiname>SearchFacet</apiname> class.</p>
            <codeblock outputclass="language-java">SearchQuery query = new SearchQuery("travel-search", fts)
    //will have max 3 hits
    .limit(3)
    //will have a "category" facet on the top 3 countries in terms of hits
    .addFacets(SearchFacet.term("countries", "country", 3));
SearchQueryResult result = bkt.query(query);
System.out.println(result.facets());</codeblock>

            <p>Here is the facet part of the result from the query above:</p>
            <screen>{countries=TermFacetResult{name='countries', field='country', total=451, missing=0, other=0, terms=[{name='United States', \
                count=217}, {name='United Kingdom', count=188}, {name='France', count=46}]}}</screen>
        </section>
        
        <section>
            
            <title>
                Detailed Example
            </title>
            
            <p>
                The following, detailed example demonstrates a variety of Full Text Search queries that
                can be made with the Java SDK. See the comments in the code for information on each.
            </p>
            
            <codeblock outputclass="language-java">package main.java;

import com.couchbase.client.java.Bucket;
import com.couchbase.client.java.Cluster;
import com.couchbase.client.java.CouchbaseCluster;
import com.couchbase.client.java.search.SearchQuery;
import com.couchbase.client.java.search.facet.SearchFacet;
import com.couchbase.client.java.search.queries.*;
import com.couchbase.client.java.search.result.SearchQueryResult;
import com.couchbase.client.java.search.result.SearchQueryRow;

public class FtsJavaClient
{
    public static void main(String[] args)
    {
        // Access the cluster that is running on the local host, authenticating with
        // the username and password of the Full Administrator. This
        // provides all privileges.
        //
        Cluster cluster = CouchbaseCluster.create("localhost");

        System.out.print("Authenticating as administrator." + "\n");
        cluster.authenticate("Administrator", "password");

        // Open the travel-sample bucket.
        //
        Bucket travelSample = cluster.openBucket("travel-sample");

        System.out.println('\n');

        // For the successful running of the routines below, three indexes must exist on Couchbase Server, all
        // applied to the travel-sample bucket. Each of the index-definition files is included in this repository.
        // The first index, "travel-sample-index-unstored", uses all the default settings. The second,
        // "travel-sample-index-stored", is identical, except that it has the "Store dynamic fields" box checked (in
        // the "Advanced" settings area of the UI): this allows content, potentially highlighted, to be returned.
        //
        // The third index, "travel-sample-index-hotel-description" only has the description fields of hotel
        // documents indexed. The index has a custom analyzer named myUnicodeAnalyzer defined on it.
        //
        // A Match Query analyzes the input text and uses the result as the query-input.
        //
        MatchQuery myMatchQuery01 = SearchQuery.match("route");

        SearchQueryResult mySearchQueryResult01 = travelSample.query(
                new SearchQuery("travel-sample-index-unstored", myMatchQuery01).limit(10));

        System.out.println("Query 1 (MatchQuery on \"route\" in travel-sample-index-unstored): ");
        System.out.println("\n");
        System.out.println("Note: The specified index was defined with dynamic fields \"unstored\", and so the output to this query does not include matching content: it only shows doc IDs.");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult01)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 2. Again, a Match Query.
        //
        // Look for a match on the string "MDG" in
        // documents' "destinationairport" field. Limit the result-set to 10.
        //
        MatchQuery myMatchQuery02 = SearchQuery.match("MDG").field("destinationairport");

        SearchQueryResult mySearchQueryResult02 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myMatchQuery02).limit(10).highlight());

        System.out.println("Query 2 (MatchQuery on \"MDG\" in \"destinationairport\" fields of travel-sample-index-stored): ");
        System.out.println("\n");
        System.out.println("Note: The specified index was defined with dynamic fields \"stored\", and so the output DOES show matching content as well as the doc IDs. Note also");
        System.out.println("that highlighting has been specified in the query, so that matched elements in the content are highlighted with mark tags.");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult02)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 3. Again, a Match Query.
        //
        // Look for a match on the string
        // "La Rue Saint Denis!!" in documents' "reviews.content" field - note how "reviews.content" addresses
        // a field nested within a sub-object in the JSON document. Limit the result-set to 10.
        //
        MatchQuery myMatchQuery03 = SearchQuery.match("La Rue Saint Denis!!").field("reviews.content").analyzer("standard");

        SearchQueryResult mySearchQueryResult03 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myMatchQuery03)
                        .limit(10).highlight()

                        // Additionally, this query also demonstrates how to apply a "facet", whereby the incidence of a particular
                        // field across documents in the bucket (eg, "country", "city", "street") is calculated and displayed, with
                        // the incidence of each field-value displayed.
                        //
                        .addFacet("Countries Referenced", SearchFacet.term("country", 5))
                        .addFacet("Cities Referenced", SearchFacet.term("city", 5))
                );

        System.out.println("Query 3 (MatchQuery on \"La Rue Saint Denis!!\" in \"reviews.content\" fields of travel-sample-index-stored, with standard analyzer): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult03)
        {
            System.out.println(row);
        }

        // An alternative way of displaying results.
        //
        System.out.println('\n');
        System.out.println("Here, the same Query 3 results, but delivered as a list by the hits() method on the SearchQueryResult object: ");
        System.out.println(mySearchQueryResult03.hits());

        System.out.println('\n');
        System.out.println("Here, again from the Query 3 results, the 3 most frequently referenced countries, then cities, accessed via a \"facet\":  ");
        System.out.println(mySearchQueryResult03.facets());

        System.out.println('\n');
        System.out.println("Now here's all:");
        System.out.println(mySearchQueryResult03);


        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 4. On a docID.
        //
        DocIdQuery myDocIdQuery04 = SearchQuery.docId("hotel_26223", "hotel_28960");

        SearchQueryResult mySearchQueryResult04 = travelSample.query(
                new SearchQuery( "travel-sample-index-unstored", myDocIdQuery04));

        System.out.println("Query 4: Result of a search on the docIDs \"hotel_26223\" and \"hotel_28960\" for travel-sample-index-unstored: ");

        for (SearchQueryRow row: mySearchQueryResult04)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 5. On a term. Note that terms do not support analysis.
        //
        // Note that fuzziness is specified as 0. See Query 6, below, for a different fuzziness specification.
        //
        TermQuery myTermIdQuery05 = SearchQuery.term("sushi").field("reviews.content")
                .fuzziness(0);

        SearchQueryResult mySearchQueryResult05 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myTermIdQuery05).limit(100).highlight());

        System.out.println("Query 5: (term-matches of \"sushi\" in \"reviews.content\" fields of travel-sample-index-stored, with fuzziness of 0 producing exact matches): ");

        int x = 0;
        for (SearchQueryRow row: mySearchQueryResult05)
        {
            System.out.println(row);
            x++;
        }

        System.out.println("Number of rows returned for \"sushi\" with fuzziness of 0 is " + x);

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 6. On the same term as used for Query 5.
        //
        // Note that fuzziness is now specified as 2.
        //
        TermQuery myTermIdQuery06 = SearchQuery.term("sushi").field("reviews.content")
                .fuzziness(2);

        SearchQueryResult mySearchQueryResult06 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myTermIdQuery06).limit(100).highlight());

        System.out.println("Query 6: (term-matches of \"sushi\" in \"reviews.content\" fields of travel-sample-index-stored, with fuzziness of 2 producing approximate matches): ");

        x = 0;
        for (SearchQueryRow row: mySearchQueryResult06)
        {
            System.out.println(row);
            x++;
        }

        System.out.println("Number of rows returned for \"sushi\" with fuzziness of 2 is " + x);

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 7. Match on a phrase.
        //
        //
        MatchPhraseQuery myMatchPhraseQuery07 = SearchQuery.matchPhrase("Eiffel Tower")
                .field("description");

        SearchQueryResult mySearchQueryResult07 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myMatchPhraseQuery07).limit(10).highlight());

        System.out.println("Query 7: (MatchPhrase query on \"Eiffel Tower\" in \"description\" fields of travel-sample-index-stored): ");

        for (SearchQueryRow row: mySearchQueryResult07)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 8. Phrase query.
        //
        PhraseQuery myPhraseQuery08 = SearchQuery.phrase("dorm", "rooms")
                .field("description");

        SearchQueryResult mySearchQueryResult08 = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myPhraseQuery08).limit(10).highlight());

        System.out.println("Query 8: (Phrase query on \"dorm\" and \"rooms\" in \"description\" fields of travel-sample-index-stored): ");

        for (SearchQueryRow row: mySearchQueryResult08)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 9. Match with index that specifies the description field of the hotel-type
        // documents only.
        //
        MatchQuery myMatchQuery9 = SearchQuery.match("swanky")

                // This analyzer must be already defined on
                // Couchbase Server as "myUnicodeAnalyzer".
                //
                .analyzer("myUnicodeAnalyzer");

        // The index travel-sample-index-hotel-description specifies that only the "description" field of
        // "hotel" documents be indexed. It inherits the default analyzer. This query is therefore only
        // run on those document-fields, and specifies a different analyzer explicitly.
        //
        SearchQueryResult mySearchQueryResult9 = travelSample.query(
                new SearchQuery( "travel-sample-index-hotel-description", myMatchQuery9)
                        .limit(10)
        );

        System.out.println("Query 9 (MatchQuery on \"swanky\" in travel-sample-index-hotel-description, using custom analyzer): ");
        System.out.println("This index includes the description field of the hotel documents only");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult9)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 10. Conjunction-set of different match queries.
        //
        MatchQuery myMatchQueryForConjunctionNumber1 = SearchQuery.match("La Rue Saint Denis!!").field("reviews.content");

        MatchQuery myMatchQueryForConjunctionNumber2 = SearchQuery.match("boutique").field("description");

        // Create a conjunction query that takes the common subset of each of the two defined match queries.
        //
        ConjunctionQuery myConjunctionQuery10 = SearchQuery.conjuncts(myMatchQueryForConjunctionNumber1, myMatchQueryForConjunctionNumber2);

        SearchQueryResult mySearchQueryResult10  = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myConjunctionQuery10)
                        .limit(10).highlight()
        );

        System.out.println("Query 10 (Conjunction of two match queries - \"La Rue Saint Denis!!\" and \"boutique\", respectively on the \"reviews.content\" and \"description\" fields - of travel-sample-index-stored): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult10)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 11: Query String Query. Note the specification of the target-field within the
        // query string.
        //
        QueryStringQuery myQueryStringQuery11 = SearchQuery.queryString("description: Imperial");

        SearchQueryResult mySearchQueryResult11  = travelSample.query(
                new SearchQuery( "travel-sample-index-unstored", myQueryStringQuery11)
                        .limit(10)
        );

        System.out.println("Query 11 (Query String Query on travel-sample-index-unstored): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult11)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 12: Wildcard Query. Note the specification of the word "boutique", using
        // a wildcard-character.
        //
        WildcardQuery myWildcardQuery12 = SearchQuery.wildcard("bouti*ue")
                .field("description");

        SearchQueryResult mySearchQueryResult12  = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myWildcardQuery12)
                        .limit(10).highlight()

        );

        System.out.println("Query 12 (WildcardQuery on travel-sample-index-stored): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult12)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 13: Numeric Range Query. Returns all documents whose id is between the stated minimum
        // and maximum values.
        //
        NumericRangeQuery myNumericRangeQuery13 = SearchQuery.numericRange().min(10100).max(10200).field("id");

        SearchQueryResult mySearchQueryResult13  = travelSample.query(
                new SearchQuery( "travel-sample-index-unstored", myNumericRangeQuery13)
                        .limit(10)
        );

        System.out.println("Query 13 (NumericRangeQuery on travel-sample-index-unstored): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult13)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // Query 14: Regexp Query.
        //
        //
        RegexpQuery myRegexpQuery14 = SearchQuery.regexp("[a-z]").field("description");

        SearchQueryResult mySearchQueryResult14  = travelSample.query(
                new SearchQuery( "travel-sample-index-stored", myRegexpQuery14)
                        .limit(10).highlight()
        );

        System.out.println("Query 14 (RegexpQuery on travel-sample-index-stored): ");
        System.out.println('\n');

        for (SearchQueryRow row : mySearchQueryResult14)
        {
            System.out.println(row);
        }

        System.out.println('\n');
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println("= = = = = = = = = = = = = = = = = = = = = = =");
        System.out.println('\n');

        // As administrator, disconnect from cluster.
        //
        System.out.println('\n');
        System.out.println("Administrator disconnecting.");
        cluster.disconnect();
    }
}</codeblock>
        </section>

	</body>
</topic>
