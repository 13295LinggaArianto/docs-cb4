<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_8_2" xtrc="/w:document/w:body[1]/w:p[1257]" xml:lang="en-US">
  <title id="title__Toc272567283">Array Functions</title>
  
 <conbody>
   <p>You can use array functions to evaluate arrays, perform computations on elements in an array, and to return a new array 
     based on a transformation.</p>
   <section id="fn-array-append"><title>ARRAY_APPEND(<varname>expression</varname>, <varname>value1</varname>,
          <varname>value2</varname>, …, <varname>valueX</varname>)</title>
   <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes an array <varname>expression</varname> and one or more
                <varname>value</varname> arguments to return a new array with the specified
                <varname>value</varname> argument(s) appended. </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>The array to be appended to.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>value</dt>
                  <dd>The text string(s) to be appended.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A new array with the specified <varname>value</varname> argument(s) appended.</dd>
            <dd>It requires a minimum of two arguments and returns an error if there are fewer.</dd>
            <dd>If either of the input argument types are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>NULL</codeph>, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> argument is not an array, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> is in the <codeph>WHERE</codeph> clause of a
              partial index, this function lists the expressions that are implicitly covered.</dd>
          </dlentry>
        </dl>
      </p>
      <p>It requires a minimum of two arguments: <varname>expression</varname> and
          <varname>value</varname>, and returns an error if there are fewer than two arguments. </p>
      <p><b>Example 1</b>: Use ARRAY_APPEND to add a user to the Public Likes
        array.<codeblock>SELECT ARRAY_APPEND(t.public_likes, "Valerie Smith") AS add_user_likes
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "add_user_likes": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Valerie Smith"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-avg"><title>ARRAY_AVG(<varname>expression</varname>)</title><p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes an array <varname>expression</varname> as an argument and
              returns the arithmetic mean (average) of all the non-<codeph>NULL</codeph> number
              values in the array, or <codeph>NULL</codeph> if there are no such values.</dd>
          </dlentry>
        </dl>
      </p><p>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>The array of numbers to be evaluated.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>A number representing the arithmetic mean (average) of all the
                non-<codeph>NULL</codeph> number values in the array
              <varname>expression</varname>.</dd>
            <dd>If there are no number values in array <varname>expression</varname>, then it
              returns <codeph>NULL</codeph>.</dd>
            <dd>If the input <varname>expression</varname> is <codeph>MISSING</codeph>, then it
              returns <codeph>MISSING</codeph>.</dd>
            <dd>If the array size of <varname>expression</varname> is 0 (no elements), then it
              returns <codeph>NULL</codeph>.</dd>
            <dd>Any non-number elements in the array <varname>expression</varname> are ignored.
            </dd>
          </dlentry>
        </dl>
      </p><b>Example 2</b>: Use ARRAY_AVG with a set of
      numbers.<codeblock>SELECT ARRAY_AVG([0,1,1,2,3,5]) AS array_average;
[
  {
    "array_average": 2
  }
]</codeblock></section>
   <section id="fn-array-concat"><title>ARRAY_CONCAT(<varname>expression1</varname>, <varname>expression2</varname>, …,
          <varname>expressionX</varname>)</title>
   <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function takes two or more <varname>expression</varname> arrays and returns a
              new array after concatenating the input arrays.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>The arrays to be concatenated together.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If there are fewer than two arguments, then it returns an error.</dd>
            <dd>If any of the input <varname>expression</varname> arguments or one of the array
              elements are <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</dd>
            <dd>If any of the input <varname>expression</varname> arguments is
              <codeph>NULL</codeph>, then it returns <codeph>NULL</codeph>.</dd>
            <dd>If any of the input <varname>expression</varname> arguments is not an array, then it
              returns <codeph>NULL</codeph>.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 3</b>: Use ARRAY_CONCAT to add two people to the Public Likes array.
        <codeblock>SELECT ARRAY_CONCAT(t.public_likes, ["John McHill", "Dave Smith"]) AS add_user_likes
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "add_user_likes": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "John McHill",
      "Dave Smith"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-contains"><title>ARRAY_CONTAINS(<varname>expression</varname>, <varname>value</varname>)</title>
   <p>
        <dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This functions checks if the array <varname>expression</varname> contains the
              specified <varname>value</varname>.</dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>The array to be searched.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>value</dt>
                  <dd>The text string that is being searched for.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If the array <varname>expression</varname> contains <varname>value</varname>, then
              it returns <codeph>TRUE</codeph>; otherwise, it returns <codeph>FALSE</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>NULL</codeph>, then it returns
                  <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> argument is not an array, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> is in the <codeph>WHERE</codeph> clause of a
              partial index, this function lists the expressions that are implicitly covered.</dd>
          </dlentry>
        </dl>
      </p>
      <p><b>Example 4</b>: ARRAY_CONTAINS with a Boolean
        function.<codeblock>SELECT ARRAY_CONTAINS(t.public_likes, "Vallie Ryan") AS array_contains_value
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "array_contains_value": true
  }
]</codeblock></p>
   </section>
   <section id="fn-array-count"><title>ARRAY_COUNT(<varname>expression</varname>)</title>
   <p><dl>
          <dlentry>
            <dt>Description</dt>
            <dd>This function counts all the non-NULL values in the input
                <varname>expression</varname> array.</dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>expression</dt>
                  <dd>The array to be searched and evaluate its values.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If the array <varname>expression</varname> contains <varname>value</varname>, then
              it returns <codeph>TRUE</codeph>; otherwise, it returns <codeph>FALSE</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>MISSING</codeph>, then it returns
                <codeph>MISSING</codeph>.</dd>
            <dd>If either of the input argument types are <codeph>NULL</codeph>, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> argument is not an array, then it returns
                <codeph>NULL</codeph>.</dd>
            <dd>If the <varname>expression</varname> is in the <codeph>WHERE</codeph> clause of a
              partial index, this function lists the expressions that are implicitly covered.</dd>
          </dlentry>
        </dl>This function returns a count of all the non-<codeph>NULL</codeph> values in the array,
        or zero if there are no such values. If the input argument is <codeph>MISSING</codeph>, it
        returns <codeph>MISSING</codeph>. If the argument is not an array, it returns a
          <codeph>NULL</codeph>
        value.<codeblock>SELECT ARRAY_COUNT(t.reviews) AS total_reviews
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "total_reviews": 2
  }
]</codeblock></p>
   </section>
   <section id="fn-array-distinct"><title>ARRAY_DISTINCT(<varname>expression</varname>)</title>
   <p>This function returns a new array with distinct elements of the input array. </p>
      <p>If the input argument is <codeph>MISSING</codeph>, it returns <codeph>MISSING</codeph>. If
        the argument is a non-array value, it returns <codeph>NULL</codeph>.</p>
  <!-- <codeblock spectitle="Syntax"></codeblock>-->
   <codeblock spectitle="Example">SELECT ARRAY_DISTINCT(["apples","bananas","grapes","oranges","apples","mangoes","bananas"]) 
AS distinct_fruits;
[
  {
    "distinct_fruits": [
      "oranges",
      "grapes",
      "bananas",
      "mangoes",
      "apples"
    ]
  }
]</codeblock>
   </section>
   
   <section id="fn-array-flatten"><title>ARRAY_FLATTEN(<varname>expression</varname>, <varname>depth</varname>)</title>
    <p>This function flattens nested array elements into the top-level array, up to the specified
        depth. </p>
      <p>If one of the arguments is <codeph>MISSING</codeph>, it returns <codeph>MISSING</codeph>.
        If the first argument is a non-array, or if the second argument is not a number, it returns
          <codeph>NULL</codeph>.</p>
   <codeblock spectitle="Syntax"><varname>array</varname> array_flatten( <varname>array-name</varname>, <varname>depth</varname>)</codeblock>
   <codeblock spectitle="Example">INSERT INTO default 
            (KEY, 
             value) 
VALUES     ("na", 
            {"a":2, "b":[1,2,[31,32,33],4,[[511, 512], 52]]});

SELECT ARRAY_FLATTEN(b,1) AS flatten_array_1level
FROM default USE KEYS ["na"];
[
  {
    "flatten_array_1level": [
      1,
      2,
      31,
      32,
      33,
      4,
      [
        511,
        512
      ],
      52
    ]
  }
]

SELECT ARRAY_FLATTEN(b,2) AS flatten_array_2levels
FROM default USE KEYS ["na"];
[
  {
    "flatten_array_2levels": [
      1,
      2,
      31,
      32,
      33,
      4,
      511,
      512,
      52
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-agg"><title>ARRAY_AGG(<varname>expression</varname>)</title>
     <p>This function returns an array of the non-<codeph>MISSING</codeph> values in the group,
        including <codeph>NULL</codeph> values. </p>
      <p>If the argument is <codeph>MISSING</codeph> or if one of the elements in the array is
          <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</p>
     <codeblock spectitle="Example">SELECT ARRAY_AGG(["abc",1,NULL]) AS array_aggregate;
[
  {
    "array_aggregate": [
      [
        "abc",
        1,
        null
      ]
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-ifnull"><title>ARRAY_IFNULL(<varname>expression</varname>)</title>
   <p>This function parses the input array and returns the first non-<codeph>NULL</codeph> value in
        the array. </p>
      <p>It returns <codeph>MISSING</codeph> if the argument is <codeph>MISSING</codeph>. If the
        argument is a non-array, then it returns <codeph>NULL</codeph>.</p>
   <codeblock spectitle="Syntax"><varname></varname> array_ifnull( <varname>array-name</varname>)</codeblock>
   <codeblock spectitle="Example">SELECT ARRAY_IFNULL( ["","apples","","bananas","grapes","oranges"]) AS check_null;
[
  {
    "check_null": ""
  }
]

SELECT ARRAY_IFNULL(t.public_likes) AS if_null
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 2;
[
  {
    "if_null": "Julius Tromp I"
  },
  {
    "if_null": null
  }
]</codeblock>
   </section>
   <section id="fn-array-insert"><title>ARRAY_INSERT(<varname>expression</varname>, <varname>position</varname>,
          <varname>value</varname>, ...)</title>
   <p>This function inserts the specified value(s) into the specified position in an array, and
        returns the new array. </p>
      <p>It requires a minimum of 3 arguments and returns <codeph>MISSING</codeph> if any of the
        arguments are <codeph>MISSING</codeph>. It returns <codeph>NULL</codeph> if the first
        argument is a non-array or if the second argument is not an integer.
        <codeblock spectitle="Syntax"><varname>array</varname> array_insert( <varname>array-name</varname>, <varname>position</varname>, <varname>value</varname>)</codeblock><codeblock spectitle="Example">SELECT ARRAY_INSERT(schedule, 2, "jsmith")[2] AS insert_val 
FROM `travel-sample` 
WHERE type = "route"  
LIMIT 1;
[
  {
    "insert_val": "jsmith"
  }
]</codeblock></p>
   </section>
   
   <section id="fn-array-intersect"><title>ARRAY_INTERSECT(<varname>expression1</varname>, <varname>expression2</varname>, ...)</title>
    <p><i>(Introduced in Couchbase Server 4.5.1)</i></p>
   <p>This function takes two or more arrays and returns the intersection of the input arrays as the
        result; that is, the array containing values that are present in all the input arrays. </p>
      <p>It returns an empty array if there are no common array elements. It returns
          <codeph>MISSING</codeph> if any of the arguments are <codeph>MISSING</codeph>, and returns
          <codeph>NULL</codeph> if any of the arguments are non-array
        values.<codeblock spectitle="Examples">SELECT ARRAY_INTERSECT( ["apples","bananas","grapes","orange"], ["apples","orange"], ["apples","grapes"])
AS array_intersection;
[
  {
    "array_intersection": [
      "apples"
    ]
  }
]

SELECT ARRAY_INTERSECT( ["apples","grapes","oranges"], ["apples"],["oranges"],["bananas", "grapes"])
AS array_intersection;
[
  {
    "array_intersection": []
  }
]</codeblock></p>
   </section>
   <section id="fn-array-length"><title>ARRAY_LENGTH(<varname>expression</varname>)</title>
   <p>This function returns the number of elements in the array. </p>
      <p>It returns <codeph>MISSING</codeph> if the argument is <codeph>MISSING</codeph>; and it
        returns <codeph>NULL</codeph> if the argument is a non-array
        value.<codeblock spectitle="Example">SELECT ARRAY_LENGTH(t.public_likes) AS total_likes 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "total_likes": 8
  }
]</codeblock></p>
   </section>
   <section id="fn-array-max"><title>ARRAY_MAX(<varname>expression</varname>)</title>
   <p>This function returns the largest non-<codeph>NULL</codeph>, non-<codeph>MISSING</codeph>
        array element, in N1QL collation order. </p>
      <p>It returns <codeph>MISSING</codeph> if the argument is <codeph>MISSING</codeph>; and it
        returns <codeph>NULL</codeph> if the argument is a non-array
        value.<codeblock>SELECT ARRAY_MAX(t.public_likes) AS max_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "max_val": "Vallie Ryan"
  }
]</codeblock></p>
   </section>
   <section id="fn-array-min"><title>ARRAY_MIN(<varname>expression</varname>)</title> 
   <p>This function returns the smallest non-<codeph>NULL</codeph>, non-<codeph>MISSING</codeph>
        array element, in N1QL collation order. </p>
      <p>It returns <codeph>MISSING</codeph> if the argument is <codeph>MISSING</codeph>; and it
        returns <codeph>NULL</codeph> if the argument is a non-array
        value.<codeblock>SELECT ARRAY_MIN(t.public_likes) AS min_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "min_val": "Brian Kilback"
  }
]</codeblock></p>
   </section>
   <section id="fn-array-position"><title>ARRAY_POSITION(<varname>expression</varname>, <varname>value</varname>)</title>
   <p>This function returns the first position of the specified <varname>value</varname> within the
        array <varname>expression</varname>. </p>
      <p>The array position is zero-based, that is, the first position is 0. </p>
      <p>It returns -1 if the values does not exist in the array. It returns
          <codeph>MISSING</codeph> if one of the arguments is <codeph>MISSING</codeph>, and it
        returns <codeph>NULL</codeph> if the arguments are non-array
        values.<codeblock>SELECT ARRAY_POSITION(t.public_likes, "Brian Kilback") AS array_position
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "array_position": 4
  }
]</codeblock></p>
   </section>
   <section id="fn-array-prepend"><title>ARRAY_PREPEND(<varname>value</varname>, ... , <varname>expression</varname>)</title>
   <p>This function returns the new array after prepending the array <varname>expression</varname>
        with the specified <varname>value</varname> or multiple <varname>value</varname> arguments. </p>
      <p>It requires a minimum of two arguments. </p>
      <p>It returns <codeph>MISSING</codeph> if one of the arguments is <codeph>MISSING</codeph>,
        and it returns <codeph>NULL</codeph> if the last argument is a
        non-array.<codeblock>SELECT ARRAY_PREPEND("Dave Smith",t.public_likes) AS prepend_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "prepend_val": [
      "Dave Smith",
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-put"><title>ARRAY_PUT(<varname>expression</varname>, <varname>value</varname>, ...)</title>
   <p>This function returns a new array with <varname>value</varname> or multiple
          <varname>value</varname> arguments appended if the <varname>value</varname> is not already
        present. Otherwise, it returns the unmodified input array <varname>expression</varname>. </p>
      <p>It requires a minimum of two arguments. </p>
      <p>If one of the arguments is <codeph>MISSING</codeph>, then it returns
          <codeph>MISSING</codeph>; and if the first argument is a non-array, then it returns
          <codeph>NULL</codeph><codeblock>SELECT ARRAY_PUT(t.public_likes, "Dave Smith") AS array_put 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "array_put": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Vallie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow",
      "Dave Smith"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-range"><title>ARRAY_RANGE(<varname>start_int</varname>, <varname>end_int</varname> [,
          <varname>step_int</varname> ])</title>
   <p>This function returns a new array of numbers, from <varname>start_int</varname> until the
        largest number less than <varname>end_int</varname>. Successive numbers are incremented by
          <varname>step_int</varname>. </p>
      <p>If <varname>step_int</varname> is not specified, then the default value of 1 is used. If
          <varname>step_int</varname> is negative, then he function decrements until the smallest
        number greater than <varname>end_int</varname>. </p>
      <p>If any of the arguments are <codeph>MISSING</codeph>, then it returns
          <codeph>MISSING</codeph>.</p>
      <p>If any of the arguments are non-numbers, then it returns <codeph>NULL</codeph>.</p>
   <codeblock spectitle="Example">SELECT ARRAY_RANGE(0, 25, 5) AS gen_array_range5;
[
  {
    "gen_array_range5": [
      0,
      5,
      10,
      15,
      20
    ]
  }
]  

SELECT ARRAY_RANGE(0.1, 2) AS gen_array_range2;
[
  {
    "gen_array_range2": [
      -1,
      0,
      1
    ]
  }
] 

SELECT ARRAY_RANGE(10, 3, -3) AS gen_array_range-3;
[
  {
    "gen_array_range-3": [
      10,
      7,
      4
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-remove"><title>ARRAY_REMOVE(<varname>expression</varname>, <varname>value1</varname>,
          <varname>value2</varname>, …, <varname>valueX</varname>)</title>
   <p>This function returns a new array with all occurrences of the specified
          <varname>value</varname> or multiple <varname>value</varname> fields removed from the
        array <varname>expression</varname>. </p>
      <p>It requires a minimum of two arguments. </p>
      <p>If any of the arguments are <codeph>MISSING</codeph>, then it returns
          <codeph>MISSING</codeph>.</p>
      <p>If the first argument is not an array, then it returns
        <codeph>NULL</codeph>.<codeblock>SELECT ARRAY_REMOVE(t.public_likes, "Vallie Ryan") AS remove_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "remove_val": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-repeat"><title>ARRAY_REPEAT(<varname>value</varname>, n)</title>
   <p>This function returns a new array with the specified <varname>value</varname> repeated
          <varname>n</varname> times. </p>
      <p>If any of the arguments are <codeph>MISSING</codeph>, then it returns
          <codeph>MISSING</codeph>.</p>
      <p>If the first argument is not an integer, then it returns <codeph>NULL</codeph>.</p><codeblock spectitle="Example">SELECT ARRAY_REPEAT("Vallie Ryan", 3) AS repeat_val;
[
  {
    "repeat_val": [
      "Vallie Ryan",
      "Vallie Ryan",
      "Vallie Ryan"
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-replace"><title>ARRAY_REPLACE(<varname>expression</varname>, <varname>value1</varname>,
          <varname>value2</varname> [, <varname>max_int</varname> ])</title>
   <p>This function returns a new array with all occurrences of <userinput>value1</userinput>
        replaced with <userinput>value2</userinput>. If <varname>max_int</varname> is specified,
        than no more than <varname>max_int</varname> replacements will be performed. </p>
      <p>If any of the arguments are <codeph>MISSING</codeph>, then it returns
          <codeph>MISSING</codeph>.</p>
      <p>If the first argument is not an array or if the second argument is <codeph>NULL</codeph>,
        then it returns
        <codeph>NULL</codeph>.<codeblock>SELECT ARRAY_REPLACE(t.public_likes, "Vallie Ryan", "Valerie Ryan") AS replace_val 
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "replace_val": [
      "Julius Tromp I",
      "Corrine Hilll",
      "Jaeden McKenzie",
      "Valerie Ryan",
      "Brian Kilback",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Elnora Trantow"
    ]
  }
]</codeblock></p>
   </section>
   <section id="fn-array-reverse"><title>ARRAY_REVERSE(<varname>expression</varname>)</title>
   <p>This function returns a new array with all the elements of <varname>expression</varname> in
        reverse order. </p>
      <p>If the argument is <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</p>
      <p>If the argument is a non-array value, then it returns
        <codeph>NULL</codeph>.<codeblock>SELECT ARRAY_REVERSE(t.public_likes) AS reverse_val
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;

[
  {
    "reverse_val": [
      "Elnora Trantow",
      "Ms. Moses Feeney",
      "Lilian McLaughlin",
      "Brian Kilback",
      "Vallie Ryan",
      "Jaeden McKenzie",
      "Corrine Hilll",
      "Julius Tromp I"
    ]
  }
]</codeblock></p>
</section>
   <section id="fn-array-sort"><title>ARRAY_SORT(<varname>expression</varname>)</title>
   <p>This function returns a new array with the elements of <varname>expression</varname> sorted in
        N1QL collation order. </p>
      <p>If the argument is <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</p>
      <p>If the argument is a non-array value, then it returns
        <codeph>NULL</codeph>.<codeblock spectitle="Example">SELECT ARRAY_SORT(t.public_likes) AS sorted_array
FROM `travel-sample` t 
WHERE type="hotel" 
LIMIT 1;
[
  {
    "sorted_array": [
      "Brian Kilback",
      "Corrine Hilll",
      "Elnora Trantow",
      "Jaeden McKenzie",
      "Julius Tromp I",
      "Lilian McLaughlin",
      "Ms. Moses Feeney",
      "Vallie Ryan"
    ]
  }
]</codeblock></p>
</section>
   <section id="fn-array-star"><title>ARRAY_STAR(<varname>expression</varname>)</title>
    <p>This function converts an array of <varname>expression</varname> objects into an object of
        arrays. </p>
      <p>If the argument is <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph>.</p>
      <p>If the argument is a non-array value, then it returns <codeph>NULL</codeph>.</p>
    <p>
      <!--<codeblock spectitle="Syntax"></codeblock>-->
      <codeblock spectitle="Example">SELECT ARRAY_STAR( [
   {
    "address": "Capstone Road, ME7 3JE",
    "city": "Medway",
    "country": "United Kingdom",
    "name": "Medway Youth Hostel",
    "url": "http://www.yha.org.uk"
  },
  {
    "address": "6 rue aux Juifs",
    "city": "Giverny",
    "country": "France",
    "name": "The Robins",
    "url": "http://givernyguesthouse.com/robin.htm"
  }]) AS array_star;

[
  {
    "array_star": {
      "address": [
        "Capstone Road, ME7 3JE",
        "6 rue aux Juifs"
      ],
      "city": [
        "Medway",
        "Giverny"
      ],
      "country": [
        "United Kingdom",
        "France"
      ],
      "name": [
        "Medway Youth Hostel",
        "The Robins"
      ],
      "url": [
        "http://www.yha.org.uk",
        "http://givernyguesthouse.com/robin.htm"
      ]
    }
  }
]</codeblock>
    </p>
     <p><b>Array references ( doc.f[*].id )</b></p>
     <p>You can use an asterisk (*) as an array subscript which converts the array to an object of
       arrays. The following example returns an array of the ages of the given contact’s children:
       <codeblock>SELECT children[*].age FROM contacts WHERE fname = "Dave"</codeblock></p>
     <p> An equivalent query can be written using the <apiname>array_star()</apiname> function:
       <codeblock>SELECT array_star(children).age FROM contacts WHERE fname = "Dave"</codeblock></p></section>
   <section id="fn-array-sum"><title>ARRAY_SUM(<varname>expression</varname>)</title>
   <p>This function returns the sum of all the non-<codeph>NULL</codeph> number values in the
          <varname>expression</varname> array, or zero if there are no number values.</p>
    <p>If the argument is <codeph>MISSING</codeph>, then it returns <codeph>MISSING</codeph></p>
      <p>If the argument is a non-array value, then it returns <codeph>NULL</codeph>. </p>
   <codeblock spectitle="Syntax">number ARRAY_SUM(array);</codeblock>
    <codeblock spectitle="Example">SELECT ARRAY_SUM([0,1,1,2,3,5]) as sum;
[
  {
    "sum": 12
  }
]</codeblock>
   </section>
   <section id="fn-array-symdiff1"><title>ARRAY_SYMDIFF(<varname>expression1</varname>, <varname>expression2</varname>, …,
          <varname>expressionX</varname>)</title>
     <p><i><?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>Synonym:
          ARRAY_SYMDIFF1(expression1, expression2, ...)</i><?oxy_custom_end?></p>
     <p>This function returns a new array based on the set symmetric difference, or disjunctive
        union, of the input <varname>expression</varname> arrays. The new array contains only those
        elements that appear in exactly one of the input arrays. </p>
      <p>It requires a minimum of two arguments. </p>
      <p>It returns MISSING if any of the arguments are MISSING, and returns NULL if one of the
        arguments is not an array.</p>
      <p>The difference between <cmdname>ARRAY_SYMDIFF()</cmdname> and
          <cmdname>ARRAY_SYMDIFFN()</cmdname> is that the former function includes the value when it
        appears only once while the latter function includes the value when it appears odd number of
        times in the input arrays. <note>Refer to the following article for more information on the
          difference between a normal and n-ary symdiff:  <xref
            href="https://en.wikipedia.org/wiki/Symmetric_difference" format="html" scope="external"
          />.</note></p>
     <codeblock spectitle="Examples">SELECT ARRAY_SYMDIFF([1, 2], [1, 2, 4], [1, 3]) AS symm_diff1;
[
  {
    "symm_diff1": [
      3,
      4
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-symdiffn"><title>ARRAY_SYMDIFFN(expression1, expression2, ...)</title>
     <p>This function returns a new array based on the set symmetric difference, or disjunctive
        union, of the input arrays. The new array contains only those elements that appear in an odd
        number of input arrays. It requires a minimum of two arguments. It returns MISSING if any of
        the arguments are MISSING, and returns NULL if one of the arguments is not an array.</p>
      <p>The difference between <cmdname>ARRAY_SYMDIFF()</cmdname> and
          <cmdname>ARRAY_SYMDIFFN()</cmdname> is that the former function includes the value when it
        appears only once while the latter function includes the value when it appears odd number of
        times in the input arrays. <note>Refer to the following article for more information on the
          difference between a normal and n-ary symdiff:  <xref
            href="https://en.wikipedia.org/wiki/Symmetric_difference" format="html" scope="external"
          />.</note></p>
     <codeblock spectitle="Examples">SELECT ARRAY_SYMDIFFN([1, 2], [1, 2, 4], [1, 3]) AS symm_diffn;
[
  {
    "symm_diffn": [
      1,
      3,
      4
    ]
  }
]</codeblock>
   </section>
   <section id="fn-array-union"><title>ARRAY_UNION(expression1, expression2, ...)</title>
     <p>This function returns a new array with the set union of the input arrays. It
       requires a minimum of two arguments. It returns MISSING if any of the arguments are MISSING,
       and returns NULL if one of the arguments is not an array.</p>
     <!--<codeblock spectitle="Syntax"></codeblock>-->
     <codeblock spectitle="Examples">SELECT ARRAY_UNION([1, 2], [1, 2, 4], [1, 3]) AS array_union;
[
  {
    "array_union": [
      3,
      2,
      1,
      4
    ]
  }
]

SELECT ARRAY_UNION([1, 2], [1, 2, 4], "abc") AS array_union;
[
  {
    "array_union": null
  }
]</codeblock>
   </section>
 </conbody>
</concept>
