<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection Operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators enable you to evaluate expressions over collections or objects. The
			operators include <codeph>ANY</codeph>, <codeph>EVERY</codeph>, <codeph>ARRAY</codeph>,
				<codeph>FIRST</codeph>, <codeph>EXISTS</codeph>, <codeph>IN</codeph>, and
				<codeph>WITHIN</codeph>.</p>

		<codeblock>exists-expression | in-expression | within-expression | ANY | EVERY | ARRAY | FIRST</codeblock>

		<section id="collection-op-any">
			<title>ANY</title>
			<codeblock> ANY <varname>variable1</varname> ( IN  | WITHIN ) <varname>expression</varname> 
     [  ,  <varname>variable2</varname> ( IN | WITHIN ) <varname>expression2</varname>  ]* 
     SATISFIES <varname>condition</varname> END </codeblock>

			<p><codeph>ANY</codeph> is a range predicate that tests a Boolean condition over the elements or
				attributes of a collection, object, or objects. It uses the <codeph>IN</codeph> and
					<codeph>WITHIN</codeph> operators to range through the collection.</p>
			<p>If at least one item in the array satisfies the <codeph>ANY</codeph> expression, then it
				returns <codeph>TRUE</codeph>. Otherwise, it returns <codeph>FALSE</codeph>.</p>
			<p><b>Example 1</b>: The following query retrieves all flights that are direct (less than 1
				stopover).</p>
			<codeblock spectitle="Query:">SELECT schedule, stops FROM `travel-sample` 
WHERE ANY flight in schedule
SATISFIES stops &lt; 1 END
LIMIT 1;  </codeblock>
			<codeblock spectitle="Result:">[
  {
    "schedule": [
      {
        "day": 0,
        "flight": "AF198",
        "utc": "10:13:00"
      },
      {
        "day": 0,
        "flight": "AF547",
        "utc": "19:14:00"
      },
...</codeblock>

			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested inside the
				document. The SATISFIES keyword is used to specify the filter condition. The
				expression after the ANY clause allows us to assign an identifier to an element in
				the array that we are searching through. </p>
			<note>The SOME and ANY operators perform the same function and can be used interchangeably. </note>
		</section>

		<section id="collection-op-every">
			<title>EVERY</title>
			<codeblock>EVERY <varname>variable</varname> ( IN  | WITHIN ) <varname>expression</varname> 
   [  ,  <varname>variable2</varname> ( IN | WITHIN ) <varname>expression2</varname>  ]* 
   SATISFIES <varname>condition</varname>  END   </codeblock>
			<p><codeph>EVERY</codeph> is a range predicate that tests a Boolean condition over the elements
				or attributes of a collection, object, or objects. It uses the <codeph>IN</codeph>
				and <codeph>WITHIN</codeph> operators to range through the collection.</p>
			<p>If every array element satisfies the <codeph>EVERY</codeph> expression, it returns
					<codeph>TRUE</codeph>. Otherwise, it returns <codeph>FALSE</codeph>. If the
				array is empty, it returns <codeph>TRUE</codeph>. </p>
			<p>The <codeph>EVERY</codeph> operator returns <codeph>TRUE</codeph> if all items meet the
				condition.</p>
			<p> For example, the following query is almost
				identical to the preceding one except EVERY is used instead of ANY. This query scans
				all contacts and returns the name of any contact that has children over the age of
				10. The result tells us that out of all of the contacts only 'ian' has children who
				are all over the age 10. </p>
			<codeblock spectitle="Query:">SELECT schedule, stops FROM `travel-sample` 
WHERE EVERY flight in schedule
SATISFIES stops &lt; 1 END
LIMIT 1; </codeblock>
			<codeblock spectitle="Result:">[
  {
    "schedule": [
      {
        "day": 0,
        "flight": "AF198",
        "utc": "10:13:00"
      },
      {
        "day": 0,
        "flight": "AF547",
        "utc": "19:14:00"
      },</codeblock>
			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested
				inside the document. The SATISFIES keyword is used to specify the filter condition. The
				expression after the EVERY clause allows us to assign a name to an element in the array
				that we are searching through. </p>
			<codeblock spectitle="Query:"> SELECT fname, children
    FROM tutorial 
        WHERE EVERY child 
        IN tutorial.children 
        SATISFIES child.age > 10  END    </codeblock>
			<codeblock spectitle="Result:">{"results":[
   {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
   {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
   {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}]}</codeblock>
		</section>

		<section id="collection-op-array">
			<title>ARRAY</title>
			<p>
				<i>array-expression:</i>
			</p>
			<codeblock>ARRAY expression FOR variable ( IN |  WITHIN ) expression
   [ ,  variable ( IN | WITHIN ) expression ]* [ ( WHEN  condition) ] END</codeblock>
			<p> The ARRAY operator lets you map and filter the elements or attributes of a collection,
				object, or objects. It evaluates to an array of the operand expression, that satisfies
				the WHEN clause, if provided. </p>
		</section>

		<section>
			<title>FIRST</title>
			<p>
				<i>first-expression:</i>
			</p>
			<codeblock>FIRST expression FOR variable ( IN |  WITHIN ) 
  expression [ ,  variable ( IN | WITHIN ) expression]* 
  [ ( WHEN  condition) ] END</codeblock>

			<p>The FIRST operator enables you to map and filter the elements or attributes of a collection, object, or objects. It evaluates to a single element based on the operand expression that satisfies the WHEN clause, if provided.</p>

		</section>

		<section id="collection-op-exists">
			<title>EXISTS</title>
			<p>
				<i>exists-expression:</i>
			</p>
			<codeblock>EXISTS expression</codeblock>

			<p>The EXISTS operator evaluates to TRUE if the value is an array and contains at least one
				element.</p>

		</section>

		<section id="collection-op-in">
			<title>IN</title>
			<p>
				<i>in-expression:</i>
			</p>
			<codeblock>expression [ NOT ] IN expression</codeblock>

			<p>The IN operator evaluates to TRUE if the right-side value is an array and directly contains
				the left-side value. The NOT IN operator evaluates to TRUE if the right-side value
				is an array and does not directly contain the left-side value.</p>
		</section>

		<section id="collection-op-within">
			<title>WITHIN</title>
			<p>
				<i>within-expression:</i>
			</p>
			<codeblock>expression [NOT] WITHIN expression</codeblock>

			<p>The WITHIN operator evaluates to TRUE if the right-side value contains the left-side value as a child or descendant. The NOT WITHIN operator evaluates to TRUE if the right-side value does not contain the left-side value as a child or descendant.</p>
		</section>

	</conbody>
</concept>
