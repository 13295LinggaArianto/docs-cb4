<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection Operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators enable you to evaluate expressions over collections or objects. The
			operators include ANY, EVERY, ARRAY, FIRST, EXISTS, IN, and WITHIN.</p>
		<codeblock>exists-expression | in-expression | within-expression | ANY | EVERY | ARRAY | FIRST</codeblock>
		<section id="collection-op-any"><title>ANY</title><codeph>ANY</codeph> is a range predicate
			that tests a Boolean condition over the elements or attributes of a collection, object,
			or objects. It uses the <codeph>IN</codeph> and <codeph>WITHIN</codeph> operators to
			range through the collection.<p><b>Syntax</b></p><codeblock> ANY <varname>var1</varname> ( IN  | WITHIN ) <varname>expr1</varname> 
     [  ,  <varname>var2</varname> ( IN | WITHIN ) <varname>expr2</varname>  ]* 
     SATISFIES <varname>condition</varname>  END </codeblock><p>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>var1, var2, … , varX</dt>
									<dd>A string or <xref
											href="index.dita#n1ql-lang-ref/N1QL_Expressions"
											>expression</xref> that evaluates to a string
										representing the variable name in the ANY loop.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>expr1, expr2, … , exprX</dt>
									<dd>A string or <xref
											href="index.dita#n1ql-lang-ref/N1QL_Expressions"
											>expression</xref> that evaluates to a string
										representing the array to loop through.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>condition</dt>
									<dd>An expression representing the limiting or matching clause
										to test against.</dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Values</dt>
						<dd>If at least one item in the array satisfies the <codeph>ANY</codeph>
							expression, then it returns the entire array; otherwise, it returns an
							empty array.</dd>
					</dlentry>
				</dl>
			</p><p><b>Example 1a</b>: Retrieve the array of airline flight schedules from
				Albuquerque (ABQ) to Atlanta (ATL) if any of the flights are after
			23:40.</p><codeblock>SELECT * FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND ANY departure IN schedule
SATISFIES departure.utc > "23:41" END;  </codeblock>Since
			the last flight departs at 23:41, this query results in the entire
					array.<codeblock>Results:
[
  {
    "travel-sample": {
      "airline": "KL",
      "airlineid": "airline_3090",
      "destinationairport": "ATL",
      "distance": 2038.3535078909663,
      "equipment": "757 320",
      "id": 36159,
      "schedule": [
        {
          "day": 0,
          "flight": "KL938",
          "utc": "03:54:00"
        },
        {
          "day": 0,
          "flight": "KL270",
          "utc": "16:57:00"
        },
        {
          "day": 0,
          "flight": "KL222",
          "utc": "05:17:00"
        },
        {
          "day": 0,
          "flight": "KL198",
          "utc": "05:07:00"
        },
        {
          "day": 0,
          "flight": "KL858",
          "utc": "18:59:00"
        },
        {
          "day": 1,
          "flight": "KL672",
          "utc": "19:19:00"
        },
        {
          "day": 2,
          "flight": "KL832",
          "utc": "15:54:00"
        },
        {
          "day": 2,
          "flight": "KL173",
          "utc": "07:18:00"
        },
        {
          "day": 2,
          "flight": "KL520",
          "utc": "09:05:00"
        },
        {
          "day": 3,
          "flight": "KL259",
          "utc": "11:05:00"
        },
        {
          "day": 3,
          "flight": "KL065",
          "utc": "17:11:00"
        },
        {
          "day": 4,
          "flight": "KL469",
          "utc": "06:06:00"
        },
        {
          "day": 4,
          "flight": "KL509",
          "utc": "06:53:00"
        },
        {
          "day": 4,
          "flight": "KL096",
          "utc": "10:29:00"
        },
        {
          "day": 5,
          "flight": "KL347",
          "utc": "08:51:00"
        },
        {
          "day": 5,
          "flight": "KL281",
          "utc": "06:26:00"
        },
        {
          "day": 5,
          "flight": "KL567",
          "utc": "03:54:00"
        },
        {
          "day": 5,
          "flight": "KL169",
          "utc": "23:41:00"
        },
        {
          "day": 6,
          "flight": "KL884",
          "utc": "00:36:00"
        },
        {
          "day": 6,
          "flight": "KL886",
          "utc": "14:13:00"
        },
        {
          "day": 6,
          "flight": "KL636",
          "utc": "17:40:00"
        }
      ],
      "sourceairport": "ABQ",
      "stops": 0,
      "type": "route"
    }
  }
]</codeblock><p><b>Example
					1b</b>: But if you change the <codeph>SATISFIES</codeph> clause to 1 minute
				after the last flight, then the resulting array is empty.
				</p><codeblock>{
  "results": []
}</codeblock><b>Example 1c</b>: If you wanted to
			list only the matching flights instead of the complete array, then you would
				use...<codeblock>{"results":[
  {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
  {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
  {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}
]}</codeblock><note>The
				SOME and ANY operators perform the same function and can be used interchangeably.
			</note></section>
		<section id="collection-op-every">
			<title>EVERY</title>
			<codeblock>EVERY variable ( IN  | WITHIN ) expression 
   [  ,  variable ( IN | WITHIN ) expression  ]* 
   SATISFIES condition  END   </codeblock>
			<p>EVERY is a range predicate that tests a Boolean condition over the elements or
				attributes of a collection, object, or objects. It uses the IN and WITHIN operators
				to range through the collection.</p>
			<p>If every array element satisfies the EVERY expression, it returns TRUE. Otherwise, it
				returns FALSE. If the array is empty, it returns TRUE. </p>
			<p>The EVERY operator returns TRUE if all items meet the condition.</p>
			<p> For example, the following query is almost identical to the preceding one except
				EVERY is used instead of ANY. This query scans all contacts and returns the name of
				any contact that has children over the age of 10. The result tells us that out of
				all of the contacts only 'ian' has children who are all over the age 10. </p>
			<codeblock spectitle="Query:"> SELECT name
    FROM contacts
    WHERE EVERY child IN children
    SATISFIES child.age > 10 END</codeblock>
			<codeblock spectitle="Result:">  { "name": "ian" }</codeblock>
			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested
				inside the document. The SATISFIES keyword is used to specify the filter condition.
				The expression after the EVERY clause allows us to assign a name to an element in
				the array that we are searching through. </p>
			<codeblock spectitle="Query:"> SELECT fname, children
    FROM tutorial 
        WHERE EVERY child 
        IN tutorial.children 
        SATISFIES child.age > 10  END    </codeblock>
			<codeblock spectitle="Result:">{"results":[
   {"children":[{"age":17,"fname":"Aiden","gender":"m"},{"age":2,"fname":"Bill","gender":"f"}],"fname":"Dave"},
   {"children":[{"age":17,"fname":"Xena","gender":"f"},{"age":2,"fname":"Yuri","gender":"m"}],"fname":"Earl"},
   {"children":[{"age":17,"fname":"Abama","gender":"m"},{"age":21,"fname":"Bebama","gender":"m"}],"fname":"Ian"}]}</codeblock>
		</section>
		<section id="collection-op-array">
			<title>ARRAY</title>
			<p>
				<i>array-expression:</i>
			</p>
			<codeblock>ARRAY expression FOR variable ( IN |  WITHIN ) expression
   [ ,  variable ( IN | WITHIN ) expression ]* [ ( WHEN  condition) ] END</codeblock>
			<p> The ARRAY operator lets you map and filter the elements or attributes of a
				collection, object, or objects. It evaluates to an array of the operand expression,
				that satisfies the WHEN clause, if provided. </p>
		</section>
		<section>
			<title>FIRST</title>
			<p>
				<i>first-expression:</i>
			</p>
			<codeblock>FIRST expression FOR variable ( IN |  WITHIN ) 
  expression [ ,  variable ( IN | WITHIN ) expression]* 
  [ ( WHEN  condition) ] END</codeblock>
			<p>The FIRST operator enables you to map and filter the elements or attributes of a
				collection, object, or objects. It evaluates to a single element based on the
				operand expression that satisfies the WHEN clause, if provided.</p>
		</section>
		<section id="collection-op-exists">
			<title>EXISTS</title>
			<p>
				<i>exists-expression:</i>
			</p>
			<codeblock>EXISTS expression</codeblock>
			<p>The EXISTS operator evaluates to TRUE if the value is an array and contains at least
				one element.</p>
		</section>
		<section id="collection-op-in">
			<title>IN</title>
			<p>
				<i>in-expression:</i>
			</p>
			<codeblock>expression [ NOT ] IN expression</codeblock>
			<p>The IN operator evaluates to TRUE if the right-side value is an array and directly
				contains the left-side value. The NOT IN operator evaluates to TRUE if the
				right-side value is an array and does not directly contain the left-side value.</p>
		</section>
		<section id="collection-op-within">
			<title>WITHIN</title>
			<p>
				<i>within-expression:</i>
			</p>
			<codeblock>expression [NOT] WITHIN expression</codeblock>
			<p>The WITHIN operator evaluates to TRUE if the right-side value contains the left-side
				value as a child or descendant. The NOT WITHIN operator evaluates to TRUE if the
				right-side value does not contain the left-side value as a child or descendant.</p>
		</section>
	</conbody>
</concept>
