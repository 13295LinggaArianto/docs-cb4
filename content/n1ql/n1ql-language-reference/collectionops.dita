<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection Operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators enable you to evaluate expressions over collections or objects. The
			operators include <codeph>ANY</codeph>, <codeph>EVERY</codeph>, <codeph>ARRAY</codeph>,
				<codeph>FIRST</codeph>, <codeph>EXISTS</codeph>, <codeph>IN</codeph>, and
				<codeph>WITHIN</codeph>.</p>
		<?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>
		<codeblock>exists-expression | in-expression | within-expression | ANY | EVERY | ARRAY | FIRST<?oxy_custom_end?></codeblock>
		<section id="collection-op-any">
			<title>ANY Operator</title>
			<codeblock> ANY <varname>field1</varname> ( IN | WITHIN ) <varname>in_within_expression1</varname> 
 [ , <varname>field2</varname> ( IN | WITHIN ) <varname>in_within_expression2</varname> ] * 
 SATISFIES <varname>condition</varname> END </codeblock>
			<dl>
				<dlentry>
					<dt>Description</dt>
					<dd><codeph>ANY</codeph> is a range predicate that tests a Boolean condition
						over the elements or attributes of a collection, object, or objects. </dd>
				</dlentry>
			</dl>
			<p>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>field</dt>
									<dd>The target field being queried.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>IN</dt>
									<dd><codeph>IN</codeph> sets the search range to include only
										the top level of the collection in
											<varname>in_within_expression</varname>.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>WITHIN</dt>
									<dd>This ranges through the top level and all sub-levels of the
										collection in <varname>in_within_expression</varname>.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>in_within_expression</dt>
									<dd>An array, object, or collection to search in or within.</dd>
								</dlentry>
								<dlentry>
									<dt>SATIFIES … END</dt>
									<dd>This encompasses the <varname>condition</varname> which is
										the equivalent of a <codeph>WHERE</codeph> clause.</dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>If at least one item in the array satisfies the <codeph>ANY</codeph>
							expression, then it returns <codeph>TRUE</codeph>. Otherwise, it returns
								<codeph>FALSE</codeph>.</dd>
					</dlentry>
				</dl>
			</p>
			<p><b>Example 1</b>: Count how many reviews had any Cleanliness review above 3.</p>
			<codeblock>SELECT COUNT(*) AS Total FROM `travel-sample` 
WHERE ANY x IN reviews
SATISFIES x.ratings.Cleanliness > 3 END;  </codeblock>
			<codeblock>Result:
[
  {
    "Total": 804
  }
]</codeblock>
			<p>Sometimes the conditions you want to filter need to be applied to the arrays nested
				inside the document. The SATISFIES keyword is used to specify the filter condition.
				The expression after the ANY clause allows us to assign an identifier to an element
				in the array that we are searching through. </p>
			<note>The SOME and ANY operators perform the same function and can be used
				interchangeably. </note>
		</section>
		<section id="collection-op-every">
			<title>EVERY Operator</title>
			<codeblock>EVERY <varname>field1</varname> ( IN | WITHIN ) <varname>in_within_expr1</varname> 
  [ , <varname>field2</varname> ( IN | WITHIN ) <varname>in_within_expr2</varname> ] * 
SATISFIES <varname>condition</varname>  END   </codeblock>
			<p>
				<dl>
					<dlentry>
						<dt>Description</dt>
						<dd><codeph>EVERY</codeph> is a range predicate that tests a Boolean
							condition over the elements or attributes of a collection, object, or
							objects. </dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>field</dt>
									<dd>The target field being queried.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>IN</dt>
									<dd><codeph>IN</codeph> sets the query range to include only the top level of the
										collection in <varname>in_within_expr</varname>.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>WITHIN</dt>
									<dd><codeph>WITHIN</codeph> sets the query range to include the top level and all
										descendants of the collection in
											<varname>in_within_expr</varname>.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>in_within_expr1, in_within_expr2, ...</dt>
									<dd>An array, object, or collection to search in or within.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>SATIFIES … END</dt>
									<dd>This encompasses the <varname>condition</varname> which is
										the equivalent of a <codeph>WHERE</codeph> clause.</dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>If every array element satisfies the <codeph>EVERY</codeph> expression,
							then it returns <codeph>TRUE</codeph>. Otherwise, it returns
								<codeph>FALSE</codeph>. <p>If the array is empty, it returns
									<codeph>TRUE</codeph>. </p><p>The <codeph>EVERY</codeph>
								operator returns <codeph>TRUE</codeph> if all items meet the
									<varname>condition</varname>.</p></dd>
					</dlentry>
				</dl>
			</p>
			<p><b>Example 2</b>: This example is identical to Example 1 except EVERY is used instead of ANY.
				This query counts how many reviews have all reviews above 3. </p>
			<codeblock>SELECT COUNT(*) AS Total FROM `travel-sample` 
WHERE EVERY x IN reviews
SATISFIES x.ratings.Cleanliness > 3 END;</codeblock>
			<codeblock>Result:
[
  {
    "Total": 372
  }
]</codeblock>
		</section>
		<section id="collection-op-array">
			<title>ARRAY Operator</title>
			<codeblock>ARRAY <varname>coll_obj</varname> FOR <varname>var1</varname> ( IN | WITHIN ) <varname>in_within_expr1</varname>
                 [ , <varname>var2</varname> ( IN | WITHIN ) <varname>in_within_expr2</varname> ] *
 [ ( WHEN <varname>condition</varname>) ] END</codeblock>
			<p>
				<dl>
					<dlentry>
						<dt>Description</dt>
						<dd>The ARRAY operator lets you map and filter the elements or attributes of
							a collection, object, or objects. </dd>
					</dlentry>
				</dl>
			</p>
			<dl>
				<dlentry>
					<dt>Arguments</dt>
					<dd>
						<dl>
							<dlentry>
								<dt>coll_obj</dt>
								<dd>The collection or objects being searched through.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>var1, var2, ...</dt>
								<dd>The variable name used for iterating through the collection or
									objects.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>IN</dt>
								<dd><codeph>IN</codeph> sets the query range to include only the top
									level of the collection in
									<varname>in_within_expr</varname>.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>WITHIN</dt>
								<dd><codeph>WITHIN</codeph> sets the query range to include the top
									level and all descendants of the collection in
										<varname>in_within_expr</varname>.</dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>in_within_expr1, in_within_expr2, ...</dt>
								<dd>An array, object, or collection to search in or within. </dd>
							</dlentry>
						</dl>
						<dl>
							<dlentry>
								<dt>WHEN … END</dt>
								<dd>This encompasses the <varname>condition</varname> which is the
									equivalent of a <codeph>WHERE</codeph> clause.</dd>
							</dlentry>
						</dl>
					</dd>
				</dlentry>
			</dl>
			<dl>
				<dlentry>
					<dt>Return Value</dt>
					<dd>It evaluates to an array of the operand <varname>expression</varname>, that
						satisfies the <codeph>WHEN</codeph> clause, if provided.</dd>
				</dlentry>
			</dl>
			<p>
				<b>Example 3</b>:
				<?oxy_custom_start type="oxy_content_highlight" color="255,255,0"?>List the
				...<?oxy_custom_end?><codeblock>SELECT</codeblock></p>
		</section>
		<section><title>FIRST Operator</title><codeblock>FIRST expression FOR variable ( IN |  WITHIN ) 
  expression [ ,  variable ( IN | WITHIN ) expression]* 
  [ ( WHEN  condition) ] END</codeblock><p>
				<dl>
					<dlentry>
						<dt>Description</dt>
						<dd>The <codeph>FIRST</codeph> operator enables you to map and filter the
							elements or attributes of a collection, object, or objects.</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd/>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>It evaluates to a single element based on the operand expression that
							satisfies the WHEN clause, if provided.</dd>
					</dlentry>
				</dl>
			</p><b>Example 4</b>: List</section>
		<section id="collection-op-exists"><title>EXISTS Operator</title><codeblock>EXISTS expression</codeblock><p>
				<dl>
					<dlentry>
						<dt>Description</dt>
						<dd>The <codeph>EXISTS</codeph> operator evaluates whether an item or object
							or array exists in a collection or object.</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd/>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>The EXISTS operator evaluates to TRUE if the value is an array and
							contains at least one element.</dd>
					</dlentry>
				</dl>
			</p><b>Example 5</b>: List</section>
		<section id="collection-op-in">
			<title>IN Operator</title>
			<codeblock>[ NOT ] IN <varname>in_expression</varname></codeblock>
			<p><dl>
					<dlentry>
						<dt>Description</dt>
						<dd><codeph>IN</codeph> sets the search range to include only the top level
							of the collection in <varname>in_expression</varname>.</dd>
					</dlentry>
				</dl><dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>NOT</dt>
									<dd>Used to describe the opposite of the IN operator; that is,
										to exclude certain items.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>in_expression</dt>
									<dd>The expression </dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl><dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>The IN operator evaluates to TRUE if the right-side value is an array
							and directly contains the left-side value.</dd>
						<dd>The NOT IN operator evaluates to TRUE if the right-side value is an
							array and does not directly contain the left-side value.</dd>
					</dlentry>
				</dl>
				<b>Example 6a</b>: List IN<codeblock>SELECT</codeblock></p>
			<p><b>Example 6b</b>: List NOT IN<codeblock>SELECT</codeblock></p>
		</section>
		<section id="collection-op-within">
			<title>WITHIN Operator</title>
			<codeblock>[NOT] WITHIN <varname>within_expression</varname></codeblock>
			<p><dl>
					<dlentry>
						<dt>Description</dt>
						<dd><codeph>WITHIN</codeph> sets the search range to include the top level
							and descendants of the collection in
								<varname>within_expression</varname>.</dd>
					</dlentry>
				</dl><dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>NOT</dt>
									<dd>Used to describe the opposite of the IN operator; that is,
										to exclude certain items.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>within_expression</dt>
									<dd>The expression </dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl><dl>
					<dlentry>
						<dt>Return Value</dt>
						<dd>The IN operator evaluates to TRUE if the right-side value contains the
							left-side value as a child or descendant.</dd>
						<dd>The NOT WITHIN operator evaluates to TRUE if the right-side value does
							not contain the left-side value as a child or descendant.</dd>
					</dlentry>
				</dl><b>Example 7a</b>: List WITHIN<codeblock>SELECT</codeblock><b>Example 7b</b>:
				List NOT WITHIN<codeblock>SELECT</codeblock></p>
		</section>
	</conbody>
</concept>
