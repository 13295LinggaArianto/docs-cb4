<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="topic_7_1" xtrc="/w:document/w:body[1]/w:p[627]" xml:lang="en-US">
	<title>Collection Operators</title>
	<conbody xtrc="/w:document/w:body[1]/w:p[628]">
		<p>Collection operators enable you to evaluate expressions over collections or objects. The
			operators include <codeph>ANY</codeph>, <codeph>EVERY</codeph>, <codeph>ARRAY</codeph>,
				<codeph>FIRST</codeph>, <codeph>EXISTS</codeph>, <codeph>IN</codeph>, and
				<codeph>WITHIN</codeph>.</p>
		<section id="collection-op-any"><title>ANY</title><codeph>ANY</codeph> is a range predicate that
      tests a Boolean condition over the elements or attributes of a collection, object, or objects.
      It uses the <codeph>IN</codeph> and <codeph>WITHIN</codeph> operators to range through the
          collection.<p><b>Syntax</b><image href="images/ANY_SOME_EVERY_expr.png"
          id="image_tcf_btl_ybb"/></p><codeblock>ANY <varname>var1</varname> ( IN | WITHIN ) <varname>expr1</varname> 
    [ , <varname>var2</varname> ( IN | WITHIN ) <varname>expr2</varname> ]* 
    SATISFIES <varname>condition</varname>  END </codeblock><p>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>var1, var2, … , varX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the variable name
                    in the <codeph>ANY</codeph> loop.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … , exprX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the array to loop
                    through.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>condition</dt>
                  <dd>An expression representing the limiting or matching clause to test
                    against.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If at least one item in the array satisfies the <codeph>ANY</codeph> expression,
              then it returns the entire array; otherwise, it returns an empty array.</dd>
          </dlentry>
        </dl>
      </p><p><b><codeph>ANY</codeph> Example 1a</b>: Retrieve the array of airline flight schedules
        from Albuquerque (ABQ) to Atlanta (ATL) if any of the flights are after
      23:40.</p><codeblock>SELECT * FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND <b>ANY departure IN schedule SATISFIES departure.utc > "23:41" END</b>;  </codeblock>Since
      the last flight departs at 23:41, this query results in the entire
            array.<codeblock>Results:
[
  {
    "travel-sample": {
      "airline": "KL",
      "airlineid": "airline_3090",
      "destinationairport": "ATL",
      "distance": 2038.3535078909663,
      "equipment": "757 320",
      "id": 36159,
      "schedule": [
        {
          "day": 0,
          "flight": "KL938",
          "utc": "03:54:00"
        },
        {
          "day": 0,
          "flight": "KL270",
          "utc": "16:57:00"
        },
        {
          "day": 0,
          "flight": "KL222",
          "utc": "05:17:00"
        },
        {
          "day": 0,
          "flight": "KL198",
          "utc": "05:07:00"
        },
        {
          "day": 0,
          "flight": "KL858",
          "utc": "18:59:00"
        },
        {
          "day": 1,
          "flight": "KL672",
          "utc": "19:19:00"
        },
        {
          "day": 2,
          "flight": "KL832",
          "utc": "15:54:00"
        },
        {
          "day": 2,
          "flight": "KL173",
          "utc": "07:18:00"
        },
        {
          "day": 2,
          "flight": "KL520",
          "utc": "09:05:00"
        },
        {
          "day": 3,
          "flight": "KL259",
          "utc": "11:05:00"
        },
        {
          "day": 3,
          "flight": "KL065",
          "utc": "17:11:00"
        },
        {
          "day": 4,
          "flight": "KL469",
          "utc": "06:06:00"
        },
        {
          "day": 4,
          "flight": "KL509",
          "utc": "06:53:00"
        },
        {
          "day": 4,
          "flight": "KL096",
          "utc": "10:29:00"
        },
        {
          "day": 5,
          "flight": "KL347",
          "utc": "08:51:00"
        },
        {
          "day": 5,
          "flight": "KL281",
          "utc": "06:26:00"
        },
        {
          "day": 5,
          "flight": "KL567",
          "utc": "03:54:00"
        },
        {
          "day": 5,
          "flight": "KL169",
          "utc": "23:41:00"
        },
        {
          "day": 6,
          "flight": "KL884",
          "utc": "00:36:00"
        },
        {
          "day": 6,
          "flight": "KL886",
          "utc": "14:13:00"
        },
        {
          "day": 6,
          "flight": "KL636",
          "utc": "17:40:00"
        }
      ],
      "sourceairport": "ABQ",
      "stops": 0,
      "type": "route"
    }
  }
]</codeblock><p><b><codeph>ANY</codeph>
          Example 1b</b>: But if you change the <codeph>SATISFIES</codeph> clause to 1 minute after
        the last flight ("23:42"), then the resulting array is empty.
          </p><codeblock>{
  "results": []
}</codeblock><b><codeph>ANY</codeph> Example 1c</b>: If
      you want to list only the matching arrays of flights instead of all the flight arrays, then
      see the <xref href="#topic_7_1/ArrayEx1a" format="dita"><codeph>ARRAY</codeph>
        Example</xref>.<note>The <codeph>SOME</codeph> and <codeph>ANY</codeph> operators perform
        the same function and can be used interchangeably. </note></section>
		<section><title>ARRAY</title><p>The <codeph>ARRAY</codeph> operator lets you map and filter the
        elements or attributes of a collection, object, or objects. It evaluates to an array of the
        operand expression, that satisfies the <codeph>WHEN</codeph> clause, if provided.
        </p><b>Syntax</b><p><image href="images/ARRAY_expr.png" id="image_swq_ftl_ybb"/></p><codeblock>ARRAY <varname>var1</varname> FOR <varname>var1</varname> ( IN | WITHIN ) <varname>expr1</varname>
   [ ,  <varname>var2</varname> ( IN | WITHIN ) <varname>expr2</varname> ]* 
   [ ( WHEN <varname>cond1</varname> [ AND <varname>cond2</varname> ] ) ] END</codeblock><p>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>var1, var2, … , varX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the variable name
                    in the <codeph>ARRAY</codeph> loop.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … , exprX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the array to loop
                    through.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>cond1, cond2, … , condX</dt>
                  <dd>An expression representing the limiting or matching clause to test
                    against.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The array or arrays that satisfy the <codeph>ARRAY</codeph> expression; otherwise,
              it returns an empty array.</dd>
          </dlentry>
        </dl>
      </p><p><b><codeph id="ArrayEx1a">ARRAY</codeph> Example 1a</b>: List only the arrays of Friday
        night flights from Albuquerque to Atlanta after
        7pm.<codeblock>SELECT <b>ARRAY v FOR v IN schedule WHEN v.utc > "19:00" AND v.day = 5 END</b> AS fri_evening_flights  
FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND ANY v IN schedule SATISFIES v.utc > "19:00" END;</codeblock>This
        results
            in:<codeblock>[
  {
    "fri_evening_flights": [
      {
        "day": 5,
        "flight": "KL169",
        "utc": "23:41:00"
      }
    ]
  }
]</codeblock><b><codeph>ARRAY</codeph>
          Example 1b</b>: The same results can be reached by writing <b>Example 1a</b> as
        follows:<codeblock>SELECT <b>ARRAY v FOR v IN schedule, w IN schedule WHEN v.utc > "19:00" AND w.day = 5 END</b> AS fri_evening_flights  
FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND ANY v IN schedule SATISFIES v.utc > "19:00" END;</codeblock></p></section>
		<section id="collection-op-every"><title>EVERY</title><codeph>EVERY</codeph> is a range predicate
      that tests a Boolean condition over the elements or attributes of a collection, object, or
      objects. It uses the IN and WITHIN operators to range through the
          collection.<p><b>Syntax</b><image href="images/ANY_SOME_EVERY_expr.png"
          id="image_ug3_htl_ybb"/></p><codeblock>EVERY <varname>var1</varname> ( IN | WITHIN ) <varname>expr1</varname> 
   [ , <varname>var2</varname> ( IN | WITHIN ) <varname>expr2</varname> ]* 
   SATISFIES <varname>condition</varname>  END   </codeblock><p>
        <dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>var1, var2, … , varX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the variable name
                    in the <codeph>EVERY</codeph> loop.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>expr1, expr2, … , exprX</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the array to loop
                    through.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>condition</dt>
                  <dd>An expression representing the limiting or matching clause to test
                    against.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl>
        <dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>If all the items in the array satisfies the <codeph>EVERY</codeph> expression, then
              it returns the entire array; otherwise, it returns an empty array.</dd>
          </dlentry>
        </dl>
      </p><p><b><codeph>EVERY</codeph> Example 1a</b>: Retrieve the array of airline flight
        schedules from Albuquerque (ABQ) to Atlanta (ATL) if all of the flights are after
      00:35.</p><codeblock>SELECT * FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND <b>EVERY departure IN schedule SATISFIES departure.utc > "00:35" END</b>;  </codeblock>Since
      the earliest flight departs at 00:36, this query results in the entire
            array.<codeblock>Results:
[
  {
    "travel-sample": {
      "airline": "KL",
      "airlineid": "airline_3090",
      "destinationairport": "ATL",
      "distance": 2038.3535078909663,
      "equipment": "757 320",
      "id": 36159,
      "schedule": [
        {
          "day": 0,
          "flight": "KL938",
          "utc": "03:54:00"
        },
        {
          "day": 0,
          "flight": "KL270",
          "utc": "16:57:00"
        },
        {
          "day": 0,
          "flight": "KL222",
          "utc": "05:17:00"
        },
        {
          "day": 0,
          "flight": "KL198",
          "utc": "05:07:00"
        },
        {
          "day": 0,
          "flight": "KL858",
          "utc": "18:59:00"
        },
        {
          "day": 1,
          "flight": "KL672",
          "utc": "19:19:00"
        },
        {
          "day": 2,
          "flight": "KL832",
          "utc": "15:54:00"
        },
        {
          "day": 2,
          "flight": "KL173",
          "utc": "07:18:00"
        },
        {
          "day": 2,
          "flight": "KL520",
          "utc": "09:05:00"
        },
        {
          "day": 3,
          "flight": "KL259",
          "utc": "11:05:00"
        },
        {
          "day": 3,
          "flight": "KL065",
          "utc": "17:11:00"
        },
        {
          "day": 4,
          "flight": "KL469",
          "utc": "06:06:00"
        },
        {
          "day": 4,
          "flight": "KL509",
          "utc": "06:53:00"
        },
        {
          "day": 4,
          "flight": "KL096",
          "utc": "10:29:00"
        },
        {
          "day": 5,
          "flight": "KL347",
          "utc": "08:51:00"
        },
        {
          "day": 5,
          "flight": "KL281",
          "utc": "06:26:00"
        },
        {
          "day": 5,
          "flight": "KL567",
          "utc": "03:54:00"
        },
        {
          "day": 5,
          "flight": "KL169",
          "utc": "23:41:00"
        },
        {
          "day": 6,
          "flight": "KL884",
          "utc": "00:36:00"
        },
        {
          "day": 6,
          "flight": "KL886",
          "utc": "14:13:00"
        },
        {
          "day": 6,
          "flight": "KL636",
          "utc": "17:40:00"
        }
      ],
      "sourceairport": "ABQ",
      "stops": 0,
      "type": "route"
    }
  }
]</codeblock><p><b><codeph>EVERY</codeph>
          Example 1b</b>: But if you change the <codeph>SATISFIES</codeph> clause to 1 minute after
        the first flight ("00:37"), then the resulting array is empty.
      </p><codeblock>{
  "results": []
}</codeblock></section>
		<section><title>EXISTS</title><p>The <codeph>EXISTS</codeph> condition is used in combination with
        a subquery and is considered to be met if the subquery returns at least one result.</p><p>It
        can be used in a <codeph>SELECT</codeph>, <codeph>INSERT</codeph>, <codeph>UPDATE</codeph>,
        or <codeph>DELETE</codeph> statement.</p><b>Syntax</b><p><image
          href="images/EXISTS_expr.png" id="image_dyn_jtl_ybb"/></p><codeblock><varname>search_expr</varname> EXISTS <varname>target_expr</varname></codeblock><p><dl>
          <dlentry>
            <dt>Arguments</dt>
            <dd>
              <dl>
                <dlentry>
                  <dt>search_expr</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the expression or
                    variable being searched for.</dd>
                </dlentry>
              </dl>
              <dl>
                <dlentry>
                  <dt>target_expr</dt>
                  <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                      >expression</xref> that evaluates to a string representing the array or
                    collection being searched through.</dd>
                </dlentry>
              </dl>
            </dd>
          </dlentry>
        </dl><dl>
          <dlentry>
            <dt>Return Values</dt>
            <dd>The <codeph>EXISTS</codeph> operator evaluates to <codeph>TRUE</codeph> if the value
              is an array and contains at least one element. </dd>
          </dlentry>
        </dl><b><codeph>EXISTS</codeph> Example 1:</b> Find</p></section>
		<section>
			<title>FIRST</title>
			<p>The <codeph>FIRST</codeph> operator enables you to map and filter the elements or
				attributes of a collection, object, or objects. It evaluates to a single element
				based on the operand expression that satisfies the <codeph>WHEN</codeph> clause, if
				provided.</p>
			<p><b>Syntax</b><image href="images/ARRAY_FIRST_OBJECT_expr.png" id="image_q5l_ktl_ybb"/></p>
			<codeblock>FIRST <varname>var1</varname> FOR <varname>var1</varname> ( IN | WITHIN ) <varname>expr1</varname>
   [ , <varname>var2</varname> ( IN | WITHIN ) <varname>expr2</varname>]* 
   [ ( WHEN <varname>cond1</varname> [ AND <varname>cond2</varname> ] ) ] END</codeblock>
			<p>
				<dl>
					<dlentry>
						<dt>Arguments</dt>
						<dd>
							<dl>
								<dlentry>
									<dt>var1, var2, … , varX</dt>
									<dd>A string or <xref
											href="index.dita#n1ql-lang-ref/N1QL_Expressions"
											>expression</xref> that evaluates to a string
										representing the variable name in the <codeph>ARRAY</codeph>
										loop.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>expr1, expr2, … , exprX</dt>
									<dd>A string or <xref
											href="index.dita#n1ql-lang-ref/N1QL_Expressions"
											>expression</xref> that evaluates to a string
										representing the array to loop through.</dd>
								</dlentry>
							</dl>
							<dl>
								<dlentry>
									<dt>cond1, cond2, … , condX</dt>
									<dd>An expression representing the limiting or matching clause
										to test against.</dd>
								</dlentry>
							</dl>
						</dd>
					</dlentry>
				</dl>
				<dl>
					<dlentry>
						<dt>Return Values</dt>
						<dd>The first array that satisfies the <codeph>WHEN</codeph> expression;
							otherwise, it returns an empty array.</dd>
					</dlentry>
				</dl>
			</p>
			<p><b><codeph>FIRST</codeph> Example 1a</b>: List the first array of flights from
				Albuquerque to Atlanta after
				7pm.<codeblock>SELECT <b>FIRST v FOR v IN schedule WHEN v.utc > "19:00" END</b> AS evening_flights  
FROM `travel-sample`
WHERE type="route" AND airline="KL" AND sourceairport="ABQ" AND destinationairport="ATL"
AND ANY v IN schedule SATISFIES v.utc > "19:00" END;</codeblock>This
				results
				in:<codeblock>[
  {
    "evening_flights": [
      {
        "day": 1,
        "flight": "KL672",
        "utc": "19:19:00"
      }
    ]
  }
]</codeblock></p>
		</section>
		<section id="collection-op-in"><title>IN</title><p>The <codeph>IN</codeph> operator specifies the
        search depth to include only the current level of an array and not to include any child or
        descendant arrays.</p><p><b>Syntax</b></p><p><image href="images/IN_expr.png"
          id="image_mf2_mtl_ybb"/></p><codeblock><varname>search_expr</varname> [ NOT ] IN <varname>target_expr</varname></codeblock><dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>search_expr</dt>
                <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                    >expression</xref> that evaluates to a string representing the expression or
                  variable being searched for.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>target_expr</dt>
                <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                    >expression</xref> that evaluates to a string representing the array or
                  collection being searched through.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>The <codeph>IN</codeph> operator evaluates to <codeph>TRUE</codeph> if the right-side
            value is an array and directly contains the left-side value.</dd>
          <dd>The <codeph>NOT IN</codeph> operator evaluates to <codeph>TRUE</codeph> if the
            right-side value is an array and does not directly contain the left-side value.</dd>
        </dlentry>
      </dl><b><codeph>IN</codeph> Example 1:</b> Find</section>
		<section id="collection-op-within"><title>WITHIN</title><p>The <codeph>WITHIN</codeph> operator
        specifies the search depth to include the current level of an array and all of its child and
        descendant arrays.</p><p><b>Syntax</b></p><p><image href="images/WITHIN_expr.png"
          id="image_f5c_ntl_ybb"/></p><codeblock><varname>search_expr</varname> [ NOT ] WITHIN <varname>target_expr</varname></codeblock><dl>
        <dlentry>
          <dt>Arguments</dt>
          <dd>
            <dl>
              <dlentry>
                <dt>search_expr</dt>
                <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                    >expression</xref> that evaluates to a string representing the expression or
                  variable being searched for.</dd>
              </dlentry>
            </dl>
            <dl>
              <dlentry>
                <dt>target_expr</dt>
                <dd>A string or <xref href="index.dita#n1ql-lang-ref/N1QL_Expressions"
                    >expression</xref> that evaluates to a string representing the array or
                  collection being searched through.</dd>
              </dlentry>
            </dl>
          </dd>
        </dlentry>
      </dl><dl>
        <dlentry>
          <dt>Return Values</dt>
          <dd>The <codeph>WITHIN</codeph> operator evaluates to <codeph>TRUE</codeph> if the
            right-side value is an array and directly contains the left-side value as a child or
            descendant, that is, directly or indirectly.</dd>
          <dd>The <codeph>NOT WITHIN</codeph> operator evaluates to <codeph>TRUE</codeph> if the
            right-side value is an array and no child or descendant contains the left-side
            value.</dd>
        </dlentry>
      </dl><b><codeph>WITHIN</codeph> Example 1:</b> Find</section>
	</conbody>
</concept>
